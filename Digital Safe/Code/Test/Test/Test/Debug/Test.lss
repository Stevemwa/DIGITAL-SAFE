
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00800060  000014e6  0000157a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080010c  0080010c  00001626  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001626  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001684  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000016c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000176b  00000000  00000000  000017d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fa  00000000  00000000  00002f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d14  00000000  00000000  00003735  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  0000444c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000506  00000000  00000000  00004698  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000da4  00000000  00000000  00004b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00005942  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 88 04 	jmp	0x910	; 0x910 <__vector_1>
       8:	0c 94 02 02 	jmp	0x404	; 0x404 <__vector_2>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      54:	eb 02       	muls	r30, r27
      56:	f1 02       	muls	r31, r17
      58:	f7 02       	muls	r31, r23
      5a:	fd 02       	muls	r31, r29
      5c:	03 03       	mulsu	r16, r19
      5e:	09 03       	fmul	r16, r17
      60:	0f 03       	fmul	r16, r23
      62:	15 03       	mulsu	r17, r21
      64:	19 03       	fmul	r17, r17
      66:	1f 03       	fmul	r17, r23
      68:	25 03       	mulsu	r18, r21
      6a:	2b 03       	fmul	r18, r19
      6c:	31 03       	mulsu	r19, r17
      6e:	56 03       	mulsu	r21, r22
      70:	5c 03       	fmul	r21, r20
      72:	cf 03       	fmulsu	r20, r23
      74:	05 a8       	ldd	r0, Z+53	; 0x35
      76:	4c cd       	rjmp	.-1384   	; 0xfffffb10 <__eeprom_end+0xff7efb10>
      78:	b2 d4       	rcall	.+2404   	; 0x9de <__addsf3x+0x42>
      7a:	4e b9       	out	0x0e, r20	; 14
      7c:	38 36       	cpi	r19, 0x68	; 104
      7e:	a9 02       	muls	r26, r25
      80:	0c 50       	subi	r16, 0x0C	; 12
      82:	b9 91       	ld	r27, Y+
      84:	86 88       	ldd	r8, Z+22	; 0x16
      86:	08 3c       	cpi	r16, 0xC8	; 200
      88:	a6 aa       	std	Z+54, r10	; 0x36
      8a:	aa 2a       	or	r10, r26
      8c:	be 00       	.word	0x00be	; ????
      8e:	00 00       	nop
      90:	80 3f       	cpi	r24, 0xF0	; 240

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf e5       	ldi	r28, 0x5F	; 95
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
      9e:	11 e0       	ldi	r17, 0x01	; 1
      a0:	a0 e6       	ldi	r26, 0x60	; 96
      a2:	b0 e0       	ldi	r27, 0x00	; 0
      a4:	e6 ee       	ldi	r30, 0xE6	; 230
      a6:	f4 e1       	ldi	r31, 0x14	; 20
      a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x10>
      aa:	05 90       	lpm	r0, Z+
      ac:	0d 92       	st	X+, r0
      ae:	ac 30       	cpi	r26, 0x0C	; 12
      b0:	b1 07       	cpc	r27, r17
      b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0xc>

000000b4 <__do_clear_bss>:
      b4:	21 e0       	ldi	r18, 0x01	; 1
      b6:	ac e0       	ldi	r26, 0x0C	; 12
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	a6 31       	cpi	r26, 0x16	; 22
      c0:	b2 07       	cpc	r27, r18
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
      c4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <main>
      c8:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <_exit>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <LCD_Cmd>:
	AinLow = (int)ADCL;		/* Read lower byte*/
	Ain = (int)ADCH*256;		/* Read higher 2 bits and 
					Multiply with weight */
	Ain = Ain + AinLow;				
	return(Ain);			/* Return digital value*/
}
      d0:	95 b3       	in	r25, 0x15	; 21
      d2:	9f 70       	andi	r25, 0x0F	; 15
      d4:	28 2f       	mov	r18, r24
      d6:	20 7f       	andi	r18, 0xF0	; 240
      d8:	92 2b       	or	r25, r18
      da:	95 bb       	out	0x15, r25	; 21
      dc:	95 b3       	in	r25, 0x15	; 21
      de:	9e 7f       	andi	r25, 0xFE	; 254
      e0:	95 bb       	out	0x15, r25	; 21
      e2:	95 b3       	in	r25, 0x15	; 21
      e4:	92 60       	ori	r25, 0x02	; 2
      e6:	95 bb       	out	0x15, r25	; 21
      e8:	32 e0       	ldi	r19, 0x02	; 2
      ea:	3a 95       	dec	r19
      ec:	f1 f7       	brne	.-4      	; 0xea <LCD_Cmd+0x1a>
      ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCD_Cmd+0x20>
      f0:	95 b3       	in	r25, 0x15	; 21
      f2:	9d 7f       	andi	r25, 0xFD	; 253
      f4:	95 bb       	out	0x15, r25	; 21
      f6:	ef e8       	ldi	r30, 0x8F	; 143
      f8:	f1 e0       	ldi	r31, 0x01	; 1
      fa:	31 97       	sbiw	r30, 0x01	; 1
      fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_Cmd+0x2a>
      fe:	00 c0       	rjmp	.+0      	; 0x100 <LCD_Cmd+0x30>
     100:	00 00       	nop
     102:	25 b3       	in	r18, 0x15	; 21
     104:	f0 e1       	ldi	r31, 0x10	; 16
     106:	8f 9f       	mul	r24, r31
     108:	c0 01       	movw	r24, r0
     10a:	11 24       	eor	r1, r1
     10c:	92 2f       	mov	r25, r18
     10e:	9f 70       	andi	r25, 0x0F	; 15
     110:	89 2b       	or	r24, r25
     112:	85 bb       	out	0x15, r24	; 21
     114:	85 b3       	in	r24, 0x15	; 21
     116:	82 60       	ori	r24, 0x02	; 2
     118:	85 bb       	out	0x15, r24	; 21
     11a:	32 e0       	ldi	r19, 0x02	; 2
     11c:	3a 95       	dec	r19
     11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_Cmd+0x4c>
     120:	00 c0       	rjmp	.+0      	; 0x122 <LCD_Cmd+0x52>
     122:	85 b3       	in	r24, 0x15	; 21
     124:	8d 7f       	andi	r24, 0xFD	; 253
     126:	85 bb       	out	0x15, r24	; 21
     128:	8f e9       	ldi	r24, 0x9F	; 159
     12a:	9f e0       	ldi	r25, 0x0F	; 15
     12c:	01 97       	sbiw	r24, 0x01	; 1
     12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_Cmd+0x5c>
     130:	00 c0       	rjmp	.+0      	; 0x132 <LCD_Cmd+0x62>
     132:	00 00       	nop
     134:	08 95       	ret

00000136 <LCD_Char>:
     136:	95 b3       	in	r25, 0x15	; 21
     138:	9f 70       	andi	r25, 0x0F	; 15
     13a:	28 2f       	mov	r18, r24
     13c:	20 7f       	andi	r18, 0xF0	; 240
     13e:	92 2b       	or	r25, r18
     140:	95 bb       	out	0x15, r25	; 21
     142:	95 b3       	in	r25, 0x15	; 21
     144:	91 60       	ori	r25, 0x01	; 1
     146:	95 bb       	out	0x15, r25	; 21
     148:	95 b3       	in	r25, 0x15	; 21
     14a:	92 60       	ori	r25, 0x02	; 2
     14c:	95 bb       	out	0x15, r25	; 21
     14e:	32 e0       	ldi	r19, 0x02	; 2
     150:	3a 95       	dec	r19
     152:	f1 f7       	brne	.-4      	; 0x150 <LCD_Char+0x1a>
     154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_Char+0x20>
     156:	95 b3       	in	r25, 0x15	; 21
     158:	9d 7f       	andi	r25, 0xFD	; 253
     15a:	95 bb       	out	0x15, r25	; 21
     15c:	ef e8       	ldi	r30, 0x8F	; 143
     15e:	f1 e0       	ldi	r31, 0x01	; 1
     160:	31 97       	sbiw	r30, 0x01	; 1
     162:	f1 f7       	brne	.-4      	; 0x160 <LCD_Char+0x2a>
     164:	00 c0       	rjmp	.+0      	; 0x166 <LCD_Char+0x30>
     166:	00 00       	nop
     168:	25 b3       	in	r18, 0x15	; 21
     16a:	f0 e1       	ldi	r31, 0x10	; 16
     16c:	8f 9f       	mul	r24, r31
     16e:	c0 01       	movw	r24, r0
     170:	11 24       	eor	r1, r1
     172:	92 2f       	mov	r25, r18
     174:	9f 70       	andi	r25, 0x0F	; 15
     176:	89 2b       	or	r24, r25
     178:	85 bb       	out	0x15, r24	; 21
     17a:	85 b3       	in	r24, 0x15	; 21
     17c:	82 60       	ori	r24, 0x02	; 2
     17e:	85 bb       	out	0x15, r24	; 21
     180:	32 e0       	ldi	r19, 0x02	; 2
     182:	3a 95       	dec	r19
     184:	f1 f7       	brne	.-4      	; 0x182 <LCD_Char+0x4c>
     186:	00 c0       	rjmp	.+0      	; 0x188 <LCD_Char+0x52>
     188:	85 b3       	in	r24, 0x15	; 21
     18a:	8d 7f       	andi	r24, 0xFD	; 253
     18c:	85 bb       	out	0x15, r24	; 21
     18e:	8f e9       	ldi	r24, 0x9F	; 159
     190:	9f e0       	ldi	r25, 0x0F	; 15
     192:	01 97       	sbiw	r24, 0x01	; 1
     194:	f1 f7       	brne	.-4      	; 0x192 <LCD_Char+0x5c>
     196:	00 c0       	rjmp	.+0      	; 0x198 <LCD_Char+0x62>
     198:	00 00       	nop
     19a:	08 95       	ret

0000019c <LCD_Init>:
     19c:	8f ef       	ldi	r24, 0xFF	; 255
     19e:	84 bb       	out	0x14, r24	; 20
     1a0:	8f e3       	ldi	r24, 0x3F	; 63
     1a2:	9c e9       	ldi	r25, 0x9C	; 156
     1a4:	01 97       	sbiw	r24, 0x01	; 1
     1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCD_Init+0x8>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LCD_Init+0xe>
     1aa:	00 00       	nop
     1ac:	82 e0       	ldi	r24, 0x02	; 2
     1ae:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Cmd>
     1b2:	88 e2       	ldi	r24, 0x28	; 40
     1b4:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Cmd>
     1b8:	8c e0       	ldi	r24, 0x0C	; 12
     1ba:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Cmd>
     1be:	86 e0       	ldi	r24, 0x06	; 6
     1c0:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Cmd>
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Cmd>
     1ca:	08 95       	ret

000001cc <LCD_Clear>:
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Cmd>
     1d2:	82 e0       	ldi	r24, 0x02	; 2
     1d4:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Cmd>
     1d8:	08 95       	ret

000001da <LCD_String>:
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	8c 01       	movw	r16, r24
     1e4:	c0 e0       	ldi	r28, 0x00	; 0
     1e6:	d0 e0       	ldi	r29, 0x00	; 0
     1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <LCD_String+0x16>
     1ea:	0e 94 9b 00 	call	0x136	; 0x136 <LCD_Char>
     1ee:	21 96       	adiw	r28, 0x01	; 1
     1f0:	f8 01       	movw	r30, r16
     1f2:	ec 0f       	add	r30, r28
     1f4:	fd 1f       	adc	r31, r29
     1f6:	80 81       	ld	r24, Z
     1f8:	81 11       	cpse	r24, r1
     1fa:	f7 cf       	rjmp	.-18     	; 0x1ea <LCD_String+0x10>
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	1f 91       	pop	r17
     202:	0f 91       	pop	r16
     204:	08 95       	ret

00000206 <BIRG>:
}

// Lighting the BIRG LED
// If the code entered is correct, the Bicolor LED should flash green 5 times with a pulse interval of 1second
void BIRG(int status)
{
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
	int i;
	if (status == 1){
     20a:	81 30       	cpi	r24, 0x01	; 1
     20c:	91 05       	cpc	r25, r1
     20e:	09 f0       	breq	.+2      	; 0x212 <BIRG+0xc>
     210:	56 c0       	rjmp	.+172    	; 0x2be <BIRG+0xb8>
     212:	4e c0       	rjmp	.+156    	; 0x2b0 <BIRG+0xaa>
		for (i = 0; i < 5; i++)
		{
			// Blink green but remove state either green or red
			PORTD &= ~(1 << PD6);
     214:	82 b3       	in	r24, 0x12	; 18
     216:	8f 7b       	andi	r24, 0xBF	; 191
     218:	82 bb       	out	0x12, r24	; 18
			PORTD |= (1 << PD5);
     21a:	82 b3       	in	r24, 0x12	; 18
     21c:	80 62       	ori	r24, 0x20	; 32
     21e:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     220:	2f ef       	ldi	r18, 0xFF	; 255
     222:	49 e6       	ldi	r20, 0x69	; 105
     224:	88 e1       	ldi	r24, 0x18	; 24
     226:	21 50       	subi	r18, 0x01	; 1
     228:	40 40       	sbci	r20, 0x00	; 0
     22a:	80 40       	sbci	r24, 0x00	; 0
     22c:	e1 f7       	brne	.-8      	; 0x226 <BIRG+0x20>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <BIRG+0x2a>
     230:	00 00       	nop
			_delay_ms(1000);
			PORTD &= ~(1 << PD5);
     232:	82 b3       	in	r24, 0x12	; 18
     234:	8f 7d       	andi	r24, 0xDF	; 223
     236:	82 bb       	out	0x12, r24	; 18
     238:	9f ef       	ldi	r25, 0xFF	; 255
     23a:	29 e6       	ldi	r18, 0x69	; 105
     23c:	48 e1       	ldi	r20, 0x18	; 24
     23e:	91 50       	subi	r25, 0x01	; 1
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	40 40       	sbci	r20, 0x00	; 0
     244:	e1 f7       	brne	.-8      	; 0x23e <BIRG+0x38>
     246:	00 c0       	rjmp	.+0      	; 0x248 <BIRG+0x42>
     248:	00 00       	nop
			_delay_ms(1000);
			if (latch_state == 1){
     24a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <latch_state>
     24e:	81 30       	cpi	r24, 0x01	; 1
     250:	99 f4       	brne	.+38     	; 0x278 <BIRG+0x72>
				
				LCD_Clear();
     252:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_Clear>
				LCD_String("OPEN MODE");
     256:	88 e6       	ldi	r24, 0x68	; 104
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
				BIRG(0); // open the safe
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	0e 94 03 01 	call	0x206	; 0x206 <BIRG>
				latch_state = 0;
     266:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <latch_state>
				safe_open = 1;
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <safe_open+0x1>
     272:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <safe_open>
				break;
     276:	5c c0       	rjmp	.+184    	; 0x330 <BIRG+0x12a>
			}
			else if ((i ==4) && (latch_state ==0)){
     278:	c4 30       	cpi	r28, 0x04	; 4
     27a:	d1 05       	cpc	r29, r1
     27c:	b9 f4       	brne	.+46     	; 0x2ac <BIRG+0xa6>
     27e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <latch_state>
     282:	81 11       	cpse	r24, r1
     284:	13 c0       	rjmp	.+38     	; 0x2ac <BIRG+0xa6>
				latch_state = 0;
     286:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <latch_state>
				safe_open =0;
     28a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <safe_open+0x1>
     28e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <safe_open>
				LCD_Clear();
     292:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_Clear>
				LCD_String("LOCKED MODE");
     296:	82 e7       	ldi	r24, 0x72	; 114
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
				LCD_Cmd(0xC0);
     29e:	80 ec       	ldi	r24, 0xC0	; 192
     2a0:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Cmd>
				BIRG(2); // lock the safe
     2a4:	82 e0       	ldi	r24, 0x02	; 2
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	0e 94 03 01 	call	0x206	; 0x206 <BIRG>
// If the code entered is correct, the Bicolor LED should flash green 5 times with a pulse interval of 1second
void BIRG(int status)
{
	int i;
	if (status == 1){
		for (i = 0; i < 5; i++)
     2ac:	21 96       	adiw	r28, 0x01	; 1
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <BIRG+0xae>
     2b0:	c0 e0       	ldi	r28, 0x00	; 0
     2b2:	d0 e0       	ldi	r29, 0x00	; 0
     2b4:	c5 30       	cpi	r28, 0x05	; 5
     2b6:	d1 05       	cpc	r29, r1
     2b8:	0c f4       	brge	.+2      	; 0x2bc <BIRG+0xb6>
     2ba:	ac cf       	rjmp	.-168    	; 0x214 <BIRG+0xe>
     2bc:	39 c0       	rjmp	.+114    	; 0x330 <BIRG+0x12a>
				LCD_Cmd(0xC0);
				BIRG(2); // lock the safe
			}
		}
	}
	else if (status == 0) // the safe is open
     2be:	00 97       	sbiw	r24, 0x00	; 0
     2c0:	39 f4       	brne	.+14     	; 0x2d0 <BIRG+0xca>
	{
		// Blink green but remove state either green or red
		PORTD &= ~(1 << PD6);
     2c2:	82 b3       	in	r24, 0x12	; 18
     2c4:	8f 7b       	andi	r24, 0xBF	; 191
     2c6:	82 bb       	out	0x12, r24	; 18
		PORTD |= (1 << PD5);
     2c8:	82 b3       	in	r24, 0x12	; 18
     2ca:	80 62       	ori	r24, 0x20	; 32
     2cc:	82 bb       	out	0x12, r24	; 18
     2ce:	30 c0       	rjmp	.+96     	; 0x330 <BIRG+0x12a>
	}
	else if (status == 2) // the safe is locked
     2d0:	82 30       	cpi	r24, 0x02	; 2
     2d2:	91 05       	cpc	r25, r1
     2d4:	39 f4       	brne	.+14     	; 0x2e4 <BIRG+0xde>
	{
		// Blink red but remove state either green or red
		PORTD &= ~(1 << PD5);
     2d6:	82 b3       	in	r24, 0x12	; 18
     2d8:	8f 7d       	andi	r24, 0xDF	; 223
     2da:	82 bb       	out	0x12, r24	; 18
		PORTD |= (1 << PD6);
     2dc:	82 b3       	in	r24, 0x12	; 18
     2de:	80 64       	ori	r24, 0x40	; 64
     2e0:	82 bb       	out	0x12, r24	; 18
     2e2:	26 c0       	rjmp	.+76     	; 0x330 <BIRG+0x12a>
	}
	else if (status == 3) // wrong password blink 5 times
     2e4:	03 97       	sbiw	r24, 0x03	; 3
     2e6:	21 f5       	brne	.+72     	; 0x330 <BIRG+0x12a>
     2e8:	1e c0       	rjmp	.+60     	; 0x326 <BIRG+0x120>
	{
		for (i = 0; i < 5; i++)
		{
			// Blink red but remove state either green or red
			PORTD &= ~(1 << PD5);
     2ea:	82 b3       	in	r24, 0x12	; 18
     2ec:	8f 7d       	andi	r24, 0xDF	; 223
     2ee:	82 bb       	out	0x12, r24	; 18
			PORTD |= (1 << PD6);
     2f0:	82 b3       	in	r24, 0x12	; 18
     2f2:	80 64       	ori	r24, 0x40	; 64
     2f4:	82 bb       	out	0x12, r24	; 18
     2f6:	8f ef       	ldi	r24, 0xFF	; 255
     2f8:	99 e6       	ldi	r25, 0x69	; 105
     2fa:	48 e1       	ldi	r20, 0x18	; 24
     2fc:	81 50       	subi	r24, 0x01	; 1
     2fe:	90 40       	sbci	r25, 0x00	; 0
     300:	40 40       	sbci	r20, 0x00	; 0
     302:	e1 f7       	brne	.-8      	; 0x2fc <BIRG+0xf6>
     304:	00 c0       	rjmp	.+0      	; 0x306 <BIRG+0x100>
     306:	00 00       	nop
			_delay_ms(1000);
			PORTD &= ~(1 << PD6);
     308:	82 b3       	in	r24, 0x12	; 18
     30a:	8f 7b       	andi	r24, 0xBF	; 191
     30c:	82 bb       	out	0x12, r24	; 18
     30e:	8f ef       	ldi	r24, 0xFF	; 255
     310:	99 e6       	ldi	r25, 0x69	; 105
     312:	48 e1       	ldi	r20, 0x18	; 24
     314:	81 50       	subi	r24, 0x01	; 1
     316:	90 40       	sbci	r25, 0x00	; 0
     318:	40 40       	sbci	r20, 0x00	; 0
     31a:	e1 f7       	brne	.-8      	; 0x314 <BIRG+0x10e>
     31c:	00 c0       	rjmp	.+0      	; 0x31e <BIRG+0x118>
     31e:	00 00       	nop
		PORTD &= ~(1 << PD5);
		PORTD |= (1 << PD6);
	}
	else if (status == 3) // wrong password blink 5 times
	{
		for (i = 0; i < 5; i++)
     320:	2f 5f       	subi	r18, 0xFF	; 255
     322:	3f 4f       	sbci	r19, 0xFF	; 255
     324:	02 c0       	rjmp	.+4      	; 0x32a <BIRG+0x124>
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	25 30       	cpi	r18, 0x05	; 5
     32c:	31 05       	cpc	r19, r1
     32e:	ec f2       	brlt	.-70     	; 0x2ea <BIRG+0xe4>
			_delay_ms(1000);
			PORTD &= ~(1 << PD6);
			_delay_ms(1000);
		}
	}
}
     330:	df 91       	pop	r29
     332:	cf 91       	pop	r28
     334:	08 95       	ret

00000336 <show_password>:
	return 1;
}

// Showing password
// Function to show the entered password
void show_password(void){
     336:	ef 92       	push	r14
     338:	ff 92       	push	r15
     33a:	0f 93       	push	r16
     33c:	1f 93       	push	r17
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	cd b7       	in	r28, 0x3d	; 61
     344:	de b7       	in	r29, 0x3e	; 62
     346:	e2 97       	sbiw	r28, 0x32	; 50
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	de bf       	out	0x3e, r29	; 62
     34e:	0f be       	out	0x3f, r0	; 63
     350:	cd bf       	out	0x3d, r28	; 61
	char buffer[40];
	char str[10];

	LCD_Clear();
     352:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_Clear>
	LCD_String("Enter Password: ");
     356:	8e e7       	ldi	r24, 0x7E	; 126
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
	LCD_Cmd(0xC0);
     35e:	80 ec       	ldi	r24, 0xC0	; 192
     360:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Cmd>
	
	if (password_entered == 1){
     364:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <password_entered>
     368:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <password_entered+0x1>
     36c:	01 97       	sbiw	r24, 0x01	; 1
     36e:	e9 f5       	brne	.+122    	; 0x3ea <show_password+0xb4>
     370:	20 c0       	rjmp	.+64     	; 0x3b2 <show_password+0x7c>
	for (int i = 0; i < 4; i++){
		if (input_password[i] != -1){
			sprintf(str, "%d", input_password[i]);
     372:	f8 01       	movw	r30, r16
     374:	ec 59       	subi	r30, 0x9C	; 156
     376:	ff 4f       	sbci	r31, 0xFF	; 255
     378:	80 81       	ld	r24, Z
     37a:	1f 92       	push	r1
     37c:	8f 93       	push	r24
     37e:	8f e8       	ldi	r24, 0x8F	; 143
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	9f 93       	push	r25
     384:	8f 93       	push	r24
     386:	7e 01       	movw	r14, r28
     388:	89 e2       	ldi	r24, 0x29	; 41
     38a:	e8 0e       	add	r14, r24
     38c:	f1 1c       	adc	r15, r1
     38e:	ff 92       	push	r15
     390:	ef 92       	push	r14
     392:	0e 94 60 07 	call	0xec0	; 0xec0 <sprintf>
			strcat(buffer, str);
     396:	b7 01       	movw	r22, r14
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	0e 94 55 07 	call	0xeaa	; 0xeaa <strcat>
	LCD_Clear();
	LCD_String("Enter Password: ");
	LCD_Cmd(0xC0);
	
	if (password_entered == 1){
	for (int i = 0; i < 4; i++){
     3a0:	0f 5f       	subi	r16, 0xFF	; 255
     3a2:	1f 4f       	sbci	r17, 0xFF	; 255
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	0f 90       	pop	r0
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <show_password+0x80>
     3b2:	00 e0       	ldi	r16, 0x00	; 0
     3b4:	10 e0       	ldi	r17, 0x00	; 0
     3b6:	04 30       	cpi	r16, 0x04	; 4
     3b8:	11 05       	cpc	r17, r1
     3ba:	dc f2       	brlt	.-74     	; 0x372 <show_password+0x3c>
			sprintf(str, "%d", input_password[i]);
			strcat(buffer, str);
		}
	}

	LCD_String(buffer);
     3bc:	8e 01       	movw	r16, r28
     3be:	0f 5f       	subi	r16, 0xFF	; 255
     3c0:	1f 4f       	sbci	r17, 0xFF	; 255
     3c2:	c8 01       	movw	r24, r16
     3c4:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
	memset(input_password, -1, sizeof(input_password)); // reset to -1
     3c8:	e4 e6       	ldi	r30, 0x64	; 100
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	8f ef       	ldi	r24, 0xFF	; 255
     3ce:	9f ef       	ldi	r25, 0xFF	; 255
     3d0:	91 83       	std	Z+1, r25	; 0x01
     3d2:	80 83       	st	Z, r24
     3d4:	93 83       	std	Z+3, r25	; 0x03
     3d6:	82 83       	std	Z+2, r24	; 0x02
	memset(buffer, 0, sizeof(buffer));
     3d8:	88 e2       	ldi	r24, 0x28	; 40
     3da:	f8 01       	movw	r30, r16
     3dc:	11 92       	st	Z+, r1
     3de:	8a 95       	dec	r24
     3e0:	e9 f7       	brne	.-6      	; 0x3dc <show_password+0xa6>
	password_entered = 0;
     3e2:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <password_entered+0x1>
     3e6:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <password_entered>
	}
}
     3ea:	e2 96       	adiw	r28, 0x32	; 50
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	f8 94       	cli
     3f0:	de bf       	out	0x3e, r29	; 62
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	cd bf       	out	0x3d, r28	; 61
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	1f 91       	pop	r17
     3fc:	0f 91       	pop	r16
     3fe:	ff 90       	pop	r15
     400:	ef 90       	pop	r14
     402:	08 95       	ret

00000404 <__vector_2>:
		change_password();
	}
}

ISR(INT1_vect)
{
     404:	1f 92       	push	r1
     406:	0f 92       	push	r0
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	0f 92       	push	r0
     40c:	11 24       	eor	r1, r1
     40e:	2f 93       	push	r18
     410:	3f 93       	push	r19
     412:	4f 93       	push	r20
     414:	5f 93       	push	r21
     416:	6f 93       	push	r22
     418:	7f 93       	push	r23
     41a:	8f 93       	push	r24
     41c:	9f 93       	push	r25
     41e:	af 93       	push	r26
     420:	bf 93       	push	r27
     422:	ef 93       	push	r30
     424:	ff 93       	push	r31
     426:	2f e7       	ldi	r18, 0x7F	; 127
     428:	88 e3       	ldi	r24, 0x38	; 56
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	21 50       	subi	r18, 0x01	; 1
     42e:	80 40       	sbci	r24, 0x00	; 0
     430:	90 40       	sbci	r25, 0x00	; 0
     432:	e1 f7       	brne	.-8      	; 0x42c <__vector_2+0x28>
     434:	00 c0       	rjmp	.+0      	; 0x436 <__vector_2+0x32>
     436:	00 00       	nop
	// Debounce delay
	_delay_ms(50);
	// Wait for the data to be available
	//while (!(PIND & (1 << PD3)));
	// Check if the button is pressed
	if (PIND & (1 << PD3))
     438:	83 9b       	sbis	0x10, 3	; 16
     43a:	2b c0       	rjmp	.+86     	; 0x492 <__vector_2+0x8e>
	{
		// if the button is pressed, read the data change latch_state and check if safe is open
		// if (latch_state == 0 && safe_open == 1){
		// 	latch_state = 1;
		// }
		if (latch_state == 0 && safe_open == 1){
     43c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <latch_state>
     440:	81 11       	cpse	r24, r1
     442:	1a c0       	rjmp	.+52     	; 0x478 <__vector_2+0x74>
     444:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <safe_open>
     448:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <safe_open+0x1>
     44c:	01 97       	sbiw	r24, 0x01	; 1
     44e:	a1 f4       	brne	.+40     	; 0x478 <__vector_2+0x74>
			latch_state = 0;
     450:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <latch_state>
			safe_open =0;
     454:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <safe_open+0x1>
     458:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <safe_open>
			LCD_Clear();
     45c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_Clear>
			LCD_String("LOCKED MODE");
     460:	82 e7       	ldi	r24, 0x72	; 114
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
			LCD_Cmd(0xC0);
     468:	80 ec       	ldi	r24, 0xC0	; 192
     46a:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Cmd>
			BIRG(2); // lock the safe
     46e:	82 e0       	ldi	r24, 0x02	; 2
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 03 01 	call	0x206	; 0x206 <BIRG>
     476:	0d c0       	rjmp	.+26     	; 0x492 <__vector_2+0x8e>
		}
		else if (latch_state == 0 && safe_open == 0){
     478:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <latch_state>
     47c:	81 11       	cpse	r24, r1
     47e:	09 c0       	rjmp	.+18     	; 0x492 <__vector_2+0x8e>
     480:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <safe_open>
     484:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <safe_open+0x1>
     488:	89 2b       	or	r24, r25
     48a:	19 f4       	brne	.+6      	; 0x492 <__vector_2+0x8e>
			latch_state = 1;
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <latch_state>
		// 	latch_state = 0;
		// }
	}

	// Clear the INT1 flag
	GIFR |= (1 << INTF1);
     492:	8a b7       	in	r24, 0x3a	; 58
     494:	80 68       	ori	r24, 0x80	; 128
     496:	8a bf       	out	0x3a, r24	; 58

}
     498:	ff 91       	pop	r31
     49a:	ef 91       	pop	r30
     49c:	bf 91       	pop	r27
     49e:	af 91       	pop	r26
     4a0:	9f 91       	pop	r25
     4a2:	8f 91       	pop	r24
     4a4:	7f 91       	pop	r23
     4a6:	6f 91       	pop	r22
     4a8:	5f 91       	pop	r21
     4aa:	4f 91       	pop	r20
     4ac:	3f 91       	pop	r19
     4ae:	2f 91       	pop	r18
     4b0:	0f 90       	pop	r0
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	0f 90       	pop	r0
     4b6:	1f 90       	pop	r1
     4b8:	18 95       	reti

000004ba <activate_buzzer>:




void activate_buzzer(void)
{
     4ba:	cf 92       	push	r12
     4bc:	df 92       	push	r13
     4be:	ef 92       	push	r14
     4c0:	ff 92       	push	r15
     4c2:	0f 93       	push	r16
     4c4:	1f 93       	push	r17
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
	// Set PD7 as an output
	DDRD |= (1 << BUZZER_PIN);
     4ca:	81 b3       	in	r24, 0x11	; 17
     4cc:	80 68       	ori	r24, 0x80	; 128
     4ce:	81 bb       	out	0x11, r24	; 17

	// Set up Timer/Counter 0 for PWM operation
	TCCR0 |= (1 << WGM01) | (1 << WGM00) | (1 << COM01) | (1 << CS00);
     4d0:	83 b7       	in	r24, 0x33	; 51
     4d2:	89 66       	ori	r24, 0x69	; 105
     4d4:	83 bf       	out	0x33, r24	; 51
	// Generate a police siren on PD7
	int duration = 5000; // duration of the siren (in milliseconds)
	int frequency = 800; // starting frequency of the siren
	int delta = 50; // amount to increase the frequency with each cycle
	int cycles = duration / 20; // number of cycles to produce the siren
	for (int i = 0; i < cycles; i++)
     4d6:	c0 e0       	ldi	r28, 0x00	; 0
     4d8:	d0 e0       	ldi	r29, 0x00	; 0
	// Set up Timer/Counter 0 for PWM operation
	TCCR0 |= (1 << WGM01) | (1 << WGM00) | (1 << COM01) | (1 << CS00);

	// Generate a police siren on PD7
	int duration = 5000; // duration of the siren (in milliseconds)
	int frequency = 800; // starting frequency of the siren
     4da:	00 e2       	ldi	r16, 0x20	; 32
     4dc:	13 e0       	ldi	r17, 0x03	; 3
	int delta = 50; // amount to increase the frequency with each cycle
	int cycles = duration / 20; // number of cycles to produce the siren
	for (int i = 0; i < cycles; i++)
     4de:	3a c0       	rjmp	.+116    	; 0x554 <activate_buzzer+0x9a>
	{
		OCR0 = 128 + (127 * sin(2 * 3.14 * frequency * i / 1000)); // generate the PWM signal
     4e0:	b8 01       	movw	r22, r16
     4e2:	01 2e       	mov	r0, r17
     4e4:	00 0c       	add	r0, r0
     4e6:	88 0b       	sbc	r24, r24
     4e8:	99 0b       	sbc	r25, r25
     4ea:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__floatsisf>
     4ee:	23 ec       	ldi	r18, 0xC3	; 195
     4f0:	35 ef       	ldi	r19, 0xF5	; 245
     4f2:	48 ec       	ldi	r20, 0xC8	; 200
     4f4:	50 e4       	ldi	r21, 0x40	; 64
     4f6:	0e 94 52 06 	call	0xca4	; 0xca4 <__mulsf3>
     4fa:	6b 01       	movw	r12, r22
     4fc:	7c 01       	movw	r14, r24
     4fe:	be 01       	movw	r22, r28
     500:	0d 2e       	mov	r0, r29
     502:	00 0c       	add	r0, r0
     504:	88 0b       	sbc	r24, r24
     506:	99 0b       	sbc	r25, r25
     508:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__floatsisf>
     50c:	a7 01       	movw	r20, r14
     50e:	96 01       	movw	r18, r12
     510:	0e 94 52 06 	call	0xca4	; 0xca4 <__mulsf3>
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	4a e7       	ldi	r20, 0x7A	; 122
     51a:	54 e4       	ldi	r21, 0x44	; 68
     51c:	0e 94 23 05 	call	0xa46	; 0xa46 <__divsf3>
     520:	0e 94 bf 06 	call	0xd7e	; 0xd7e <sin>
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	4e ef       	ldi	r20, 0xFE	; 254
     52a:	52 e4       	ldi	r21, 0x42	; 66
     52c:	0e 94 52 06 	call	0xca4	; 0xca4 <__mulsf3>
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	40 e0       	ldi	r20, 0x00	; 0
     536:	53 e4       	ldi	r21, 0x43	; 67
     538:	0e 94 b7 04 	call	0x96e	; 0x96e <__addsf3>
     53c:	0e 94 95 05 	call	0xb2a	; 0xb2a <__fixunssfsi>
     540:	6c bf       	out	0x3c, r22	; 60
     542:	8f e1       	ldi	r24, 0x1F	; 31
     544:	9e e4       	ldi	r25, 0x4E	; 78
     546:	01 97       	sbiw	r24, 0x01	; 1
     548:	f1 f7       	brne	.-4      	; 0x546 <activate_buzzer+0x8c>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <activate_buzzer+0x92>
     54c:	00 00       	nop
		_delay_ms(10); // delay for 10 ms
		frequency += delta; // increase the frequency
     54e:	0e 5c       	subi	r16, 0xCE	; 206
     550:	1f 4f       	sbci	r17, 0xFF	; 255
	// Generate a police siren on PD7
	int duration = 5000; // duration of the siren (in milliseconds)
	int frequency = 800; // starting frequency of the siren
	int delta = 50; // amount to increase the frequency with each cycle
	int cycles = duration / 20; // number of cycles to produce the siren
	for (int i = 0; i < cycles; i++)
     552:	21 96       	adiw	r28, 0x01	; 1
     554:	ca 3f       	cpi	r28, 0xFA	; 250
     556:	d1 05       	cpc	r29, r1
     558:	1c f2       	brlt	.-122    	; 0x4e0 <activate_buzzer+0x26>
		_delay_ms(10); // delay for 10 ms
		frequency += delta; // increase the frequency
	}

	// Turn off the buzzer
	TCCR0 &= ~(1 << WGM01) & ~(1 << WGM00) & ~(1 << COM01) & ~(1 << CS00);
     55a:	83 b7       	in	r24, 0x33	; 51
     55c:	86 79       	andi	r24, 0x96	; 150
     55e:	83 bf       	out	0x33, r24	; 51
	PORTD &= ~(1 << BUZZER_PIN);
     560:	82 b3       	in	r24, 0x12	; 18
     562:	8f 77       	andi	r24, 0x7F	; 127
     564:	82 bb       	out	0x12, r24	; 18
}
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	ff 90       	pop	r15
     570:	ef 90       	pop	r14
     572:	df 90       	pop	r13
     574:	cf 90       	pop	r12
     576:	08 95       	ret

00000578 <check_password>:
// Checking password
int check_password(void)
{
	//while (!(PIND & (1 << PD3)));
	// read the password from eeeprom
	eeprom_read_block((void *)&stored_password, (const void *)0, 4);
     578:	44 e0       	ldi	r20, 0x04	; 4
     57a:	50 e0       	ldi	r21, 0x00	; 0
     57c:	60 e0       	ldi	r22, 0x00	; 0
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	80 e6       	ldi	r24, 0x60	; 96
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 13 0a 	call	0x1426	; 0x1426 <eeprom_read_block>

	int i;
	for (i = 0; i < 4; i++)
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	10 c0       	rjmp	.+32     	; 0x5ae <check_password+0x36>
	{
		if (input_password[i] != stored_password[i])
     58e:	fc 01       	movw	r30, r24
     590:	ec 59       	subi	r30, 0x9C	; 156
     592:	ff 4f       	sbci	r31, 0xFF	; 255
     594:	30 81       	ld	r19, Z
     596:	fc 01       	movw	r30, r24
     598:	e0 5a       	subi	r30, 0xA0	; 160
     59a:	ff 4f       	sbci	r31, 0xFF	; 255
     59c:	20 81       	ld	r18, Z
     59e:	32 17       	cp	r19, r18
     5a0:	29 f0       	breq	.+10     	; 0x5ac <check_password+0x34>
		{
			//count = 0;
			activate_buzzer();
     5a2:	0e 94 5d 02 	call	0x4ba	; 0x4ba <activate_buzzer>
			return -1;
     5a6:	8f ef       	ldi	r24, 0xFF	; 255
     5a8:	9f ef       	ldi	r25, 0xFF	; 255
     5aa:	08 95       	ret
	//while (!(PIND & (1 << PD3)));
	// read the password from eeeprom
	eeprom_read_block((void *)&stored_password, (const void *)0, 4);

	int i;
	for (i = 0; i < 4; i++)
     5ac:	01 96       	adiw	r24, 0x01	; 1
     5ae:	84 30       	cpi	r24, 0x04	; 4
     5b0:	91 05       	cpc	r25, r1
     5b2:	6c f3       	brlt	.-38     	; 0x58e <check_password+0x16>
			return -1;
		}
	}
	 // if the loop completes without returning, the password is correct
	//count = 0;
	return 1;
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	90 e0       	ldi	r25, 0x00	; 0
}
     5b8:	08 95       	ret

000005ba <read_keypad>:


uint8_t read_keypad(void)
{
	// Wait for the data to be available
	while (!(PIND & (1 << PD2)));
     5ba:	82 9b       	sbis	0x10, 2	; 16
     5bc:	fe cf       	rjmp	.-4      	; 0x5ba <read_keypad>

	// Read the data from the keypad
	int value = PINB;
     5be:	e6 b3       	in	r30, 0x16	; 22
	int data = 255; // initialize to a default value
	switch (value)
     5c0:	8e 2f       	mov	r24, r30
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	80 31       	cpi	r24, 0x10	; 16
     5c6:	91 05       	cpc	r25, r1
     5c8:	08 f0       	brcs	.+2      	; 0x5cc <read_keypad+0x12>
     5ca:	ef c0       	rjmp	.+478    	; 0x7aa <read_keypad+0x1f0>
     5cc:	fc 01       	movw	r30, r24
     5ce:	e6 5d       	subi	r30, 0xD6	; 214
     5d0:	ff 4f       	sbci	r31, 0xFF	; 255
     5d2:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <__tablejump2__>
	{
		case 0:
		data = 7;
		LCD_String("*");
     5d6:	82 e9       	ldi	r24, 0x92	; 146
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
	int value = PINB;
	int data = 255; // initialize to a default value
	switch (value)
	{
		case 0:
		data = 7;
     5de:	87 e0       	ldi	r24, 0x07	; 7
		LCD_String("*");
		break;
     5e0:	e9 c0       	rjmp	.+466    	; 0x7b4 <read_keypad+0x1fa>
		case 1:
		data = 8;
		LCD_String("*");
     5e2:	82 e9       	ldi	r24, 0x92	; 146
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
		case 0:
		data = 7;
		LCD_String("*");
		break;
		case 1:
		data = 8;
     5ea:	88 e0       	ldi	r24, 0x08	; 8
		LCD_String("*");
		break;
     5ec:	e3 c0       	rjmp	.+454    	; 0x7b4 <read_keypad+0x1fa>
		case 2:
		data = 9;
		LCD_String("*");
     5ee:	82 e9       	ldi	r24, 0x92	; 146
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
		case 1:
		data = 8;
		LCD_String("*");
		break;
		case 2:
		data = 9;
     5f6:	89 e0       	ldi	r24, 0x09	; 9
		LCD_String("*");
		break;
     5f8:	dd c0       	rjmp	.+442    	; 0x7b4 <read_keypad+0x1fa>
		case 3:
		LCD_String("/");
     5fa:	84 e9       	ldi	r24, 0x94	; 148
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
	// Wait for the data to be available
	while (!(PIND & (1 << PD2)));

	// Read the data from the keypad
	int value = PINB;
	int data = 255; // initialize to a default value
     602:	8f ef       	ldi	r24, 0xFF	; 255
		data = 9;
		LCD_String("*");
		break;
		case 3:
		LCD_String("/");
		break;
     604:	d7 c0       	rjmp	.+430    	; 0x7b4 <read_keypad+0x1fa>
		case 4:
		data = 4;
		LCD_String("*");
     606:	82 e9       	ldi	r24, 0x92	; 146
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
		break;
		case 3:
		LCD_String("/");
		break;
		case 4:
		data = 4;
     60e:	84 e0       	ldi	r24, 0x04	; 4
		LCD_String("*");
		break;
     610:	d1 c0       	rjmp	.+418    	; 0x7b4 <read_keypad+0x1fa>
		case 5:
		data = 5;
		LCD_String("*");
     612:	82 e9       	ldi	r24, 0x92	; 146
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
		case 4:
		data = 4;
		LCD_String("*");
		break;
		case 5:
		data = 5;
     61a:	85 e0       	ldi	r24, 0x05	; 5
		LCD_String("*");
		break;
     61c:	cb c0       	rjmp	.+406    	; 0x7b4 <read_keypad+0x1fa>
		case 6:
		data = 6;
		LCD_String("*");
     61e:	82 e9       	ldi	r24, 0x92	; 146
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
		case 5:
		data = 5;
		LCD_String("*");
		break;
		case 6:
		data = 6;
     626:	86 e0       	ldi	r24, 0x06	; 6
		LCD_String("*");
		break;
     628:	c5 c0       	rjmp	.+394    	; 0x7b4 <read_keypad+0x1fa>
		case 7:
		//LCD_String("*");
		//data = 200; // A generic value to indicate that the key is *
		show_password();
     62a:	0e 94 9b 01 	call	0x336	; 0x336 <show_password>
	// Wait for the data to be available
	while (!(PIND & (1 << PD2)));

	// Read the data from the keypad
	int value = PINB;
	int data = 255; // initialize to a default value
     62e:	8f ef       	ldi	r24, 0xFF	; 255
		break;
		case 7:
		//LCD_String("*");
		//data = 200; // A generic value to indicate that the key is *
		show_password();
		break;
     630:	c1 c0       	rjmp	.+386    	; 0x7b4 <read_keypad+0x1fa>
		case 8:
		data = 1;
		LCD_String("*");
     632:	82 e9       	ldi	r24, 0x92	; 146
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
		//LCD_String("*");
		//data = 200; // A generic value to indicate that the key is *
		show_password();
		break;
		case 8:
		data = 1;
     63a:	81 e0       	ldi	r24, 0x01	; 1
		LCD_String("*");
		break;
     63c:	bb c0       	rjmp	.+374    	; 0x7b4 <read_keypad+0x1fa>
		case 9:
		data = 2;
		LCD_String("*");
     63e:	82 e9       	ldi	r24, 0x92	; 146
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
		case 8:
		data = 1;
		LCD_String("*");
		break;
		case 9:
		data = 2;
     646:	82 e0       	ldi	r24, 0x02	; 2
		LCD_String("*");
		break;
     648:	b5 c0       	rjmp	.+362    	; 0x7b4 <read_keypad+0x1fa>
		case 10:
		data = 3;
		LCD_String("*");
     64a:	82 e9       	ldi	r24, 0x92	; 146
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
		case 9:
		data = 2;
		LCD_String("*");
		break;
		case 10:
		data = 3;
     652:	83 e0       	ldi	r24, 0x03	; 3
		LCD_String("*");
		break;
     654:	af c0       	rjmp	.+350    	; 0x7b4 <read_keypad+0x1fa>
		case 11:
		LCD_String("-");
     656:	86 e9       	ldi	r24, 0x96	; 150
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
	// Wait for the data to be available
	while (!(PIND & (1 << PD2)));

	// Read the data from the keypad
	int value = PINB;
	int data = 255; // initialize to a default value
     65e:	8f ef       	ldi	r24, 0xFF	; 255
		data = 3;
		LCD_String("*");
		break;
		case 11:
		LCD_String("-");
		break;
     660:	a9 c0       	rjmp	.+338    	; 0x7b4 <read_keypad+0x1fa>

		case 12: // ON/C
		// reset the password if safe is open
		if (safe_open == 1){
     662:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <safe_open>
     666:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <safe_open+0x1>
     66a:	01 97       	sbiw	r24, 0x01	; 1
     66c:	09 f0       	breq	.+2      	; 0x670 <read_keypad+0xb6>
     66e:	9f c0       	rjmp	.+318    	; 0x7ae <read_keypad+0x1f4>
			LCD_Clear();
     670:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_Clear>
			LCD_String("Reset Password:");
     674:	88 e9       	ldi	r24, 0x98	; 152
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
			LCD_Cmd(0xC0);
     67c:	80 ec       	ldi	r24, 0xC0	; 192
     67e:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Cmd>
			BIRG(0);
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 03 01 	call	0x206	; 0x206 <BIRG>
     68a:	2f ef       	ldi	r18, 0xFF	; 255
     68c:	39 e6       	ldi	r19, 0x69	; 105
     68e:	88 e1       	ldi	r24, 0x18	; 24
     690:	21 50       	subi	r18, 0x01	; 1
     692:	30 40       	sbci	r19, 0x00	; 0
     694:	80 40       	sbci	r24, 0x00	; 0
     696:	e1 f7       	brne	.-8      	; 0x690 <read_keypad+0xd6>
     698:	00 c0       	rjmp	.+0      	; 0x69a <read_keypad+0xe0>
     69a:	00 00       	nop
			_delay_ms(1000);
			password_reset = 1;
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
     6a4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	// Wait for the data to be available
	while (!(PIND & (1 << PD2)));

	// Read the data from the keypad
	int value = PINB;
	int data = 255; // initialize to a default value
     6a8:	8f ef       	ldi	r24, 0xFF	; 255
     6aa:	84 c0       	rjmp	.+264    	; 0x7b4 <read_keypad+0x1fa>
		// return led to original state
		break;

		case 13:
		data = 0;
		LCD_String("*");
     6ac:	82 e9       	ldi	r24, 0x92	; 146
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
		// memset(input_password, 0, sizeof(input_password)); // clear out the array
		// return led to original state
		break;

		case 13:
		data = 0;
     6b4:	80 e0       	ldi	r24, 0x00	; 0
		LCD_String("*");
		break;
     6b6:	7e c0       	rjmp	.+252    	; 0x7b4 <read_keypad+0x1fa>
		case 14:
		// check password and check if it's a reset or not
		if ((password_reset == 0) && (check_password() == -1)){// normal operation wrong password
     6b8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     6bc:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
     6c0:	89 2b       	or	r24, r25
     6c2:	99 f4       	brne	.+38     	; 0x6ea <read_keypad+0x130>
     6c4:	0e 94 bc 02 	call	0x578	; 0x578 <check_password>
     6c8:	01 96       	adiw	r24, 0x01	; 1
     6ca:	79 f4       	brne	.+30     	; 0x6ea <read_keypad+0x130>
			LCD_Clear();
     6cc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_Clear>
			LCD_String("WRONG PASSWORD!");
     6d0:	88 ea       	ldi	r24, 0xA8	; 168
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
			BIRG(3); // wrong password blink 5 times
     6d8:	83 e0       	ldi	r24, 0x03	; 3
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	0e 94 03 01 	call	0x206	; 0x206 <BIRG>
			LCD_Cmd(0xC0);
     6e0:	80 ec       	ldi	r24, 0xC0	; 192
     6e2:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Cmd>
	// Wait for the data to be available
	while (!(PIND & (1 << PD2)));

	// Read the data from the keypad
	int value = PINB;
	int data = 255; // initialize to a default value
     6e6:	8f ef       	ldi	r24, 0xFF	; 255
		// check password and check if it's a reset or not
		if ((password_reset == 0) && (check_password() == -1)){// normal operation wrong password
			LCD_Clear();
			LCD_String("WRONG PASSWORD!");
			BIRG(3); // wrong password blink 5 times
			LCD_Cmd(0xC0);
     6e8:	65 c0       	rjmp	.+202    	; 0x7b4 <read_keypad+0x1fa>
		}
		else if ((password_reset == 0) && (check_password() == 1)){ // normal operation correct password
     6ea:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     6ee:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
     6f2:	89 2b       	or	r24, r25
     6f4:	81 f4       	brne	.+32     	; 0x716 <read_keypad+0x15c>
     6f6:	0e 94 bc 02 	call	0x578	; 0x578 <check_password>
     6fa:	01 97       	sbiw	r24, 0x01	; 1
     6fc:	61 f4       	brne	.+24     	; 0x716 <read_keypad+0x15c>
			LCD_Clear();
     6fe:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_Clear>
			LCD_String("Correct Password");
     702:	88 eb       	ldi	r24, 0xB8	; 184
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
			BIRG(1); // correct password flash green 5 times
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 03 01 	call	0x206	; 0x206 <BIRG>
	// Wait for the data to be available
	while (!(PIND & (1 << PD2)));

	// Read the data from the keypad
	int value = PINB;
	int data = 255; // initialize to a default value
     712:	8f ef       	ldi	r24, 0xFF	; 255
			LCD_Cmd(0xC0);
		}
		else if ((password_reset == 0) && (check_password() == 1)){ // normal operation correct password
			LCD_Clear();
			LCD_String("Correct Password");
			BIRG(1); // correct password flash green 5 times
     714:	4f c0       	rjmp	.+158    	; 0x7b4 <read_keypad+0x1fa>
		}
		else if ((password_reset == 1) && (safe_open == 1)){ // reset password
     716:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     71a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
     71e:	01 97       	sbiw	r24, 0x01	; 1
     720:	09 f0       	breq	.+2      	; 0x724 <read_keypad+0x16a>
     722:	47 c0       	rjmp	.+142    	; 0x7b2 <read_keypad+0x1f8>
     724:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <safe_open>
     728:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <safe_open+0x1>
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	61 f0       	breq	.+24     	; 0x748 <read_keypad+0x18e>
	// Wait for the data to be available
	while (!(PIND & (1 << PD2)));

	// Read the data from the keypad
	int value = PINB;
	int data = 255; // initialize to a default value
     730:	8f ef       	ldi	r24, 0xFF	; 255
     732:	40 c0       	rjmp	.+128    	; 0x7b4 <read_keypad+0x1fa>
			LCD_String("Correct Password");
			BIRG(1); // correct password flash green 5 times
		}
		else if ((password_reset == 1) && (safe_open == 1)){ // reset password
			for (int i = 0; i < 4; i++){
				stored_password[i] = input_password[i];
     734:	fc 01       	movw	r30, r24
     736:	ec 59       	subi	r30, 0x9C	; 156
     738:	ff 4f       	sbci	r31, 0xFF	; 255
     73a:	20 81       	ld	r18, Z
     73c:	fc 01       	movw	r30, r24
     73e:	e0 5a       	subi	r30, 0xA0	; 160
     740:	ff 4f       	sbci	r31, 0xFF	; 255
     742:	20 83       	st	Z, r18
			LCD_Clear();
			LCD_String("Correct Password");
			BIRG(1); // correct password flash green 5 times
		}
		else if ((password_reset == 1) && (safe_open == 1)){ // reset password
			for (int i = 0; i < 4; i++){
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	02 c0       	rjmp	.+4      	; 0x74c <read_keypad+0x192>
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	84 30       	cpi	r24, 0x04	; 4
     74e:	91 05       	cpc	r25, r1
     750:	8c f3       	brlt	.-30     	; 0x734 <read_keypad+0x17a>
				stored_password[i] = input_password[i];
				}				
			password_reset = 0; // reset the password reset flag
     752:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
     756:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
			LCD_Clear();
     75a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_Clear>
			LCD_String("Code Changed");
     75e:	89 ec       	ldi	r24, 0xC9	; 201
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
			// _delay_ms(1000);
			eeprom_write_block((const void*)input_password, (void*)0, sizeof(input_password));
     766:	44 e0       	ldi	r20, 0x04	; 4
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	84 e6       	ldi	r24, 0x64	; 100
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 23 0a 	call	0x1446	; 0x1446 <eeprom_write_block>
     776:	3f ef       	ldi	r19, 0xFF	; 255
     778:	89 e6       	ldi	r24, 0x69	; 105
     77a:	98 e1       	ldi	r25, 0x18	; 24
     77c:	31 50       	subi	r19, 0x01	; 1
     77e:	80 40       	sbci	r24, 0x00	; 0
     780:	90 40       	sbci	r25, 0x00	; 0
     782:	e1 f7       	brne	.-8      	; 0x77c <read_keypad+0x1c2>
     784:	00 c0       	rjmp	.+0      	; 0x786 <read_keypad+0x1cc>
     786:	00 00       	nop
			_delay_ms(1000);
			LCD_Clear();
     788:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_Clear>
			LCD_String("Enter Password: ");
     78c:	8e e7       	ldi	r24, 0x7E	; 126
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
			LCD_Cmd(0xC0);
     794:	80 ec       	ldi	r24, 0xC0	; 192
     796:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Cmd>
	// Wait for the data to be available
	while (!(PIND & (1 << PD2)));

	// Read the data from the keypad
	int value = PINB;
	int data = 255; // initialize to a default value
     79a:	8f ef       	ldi	r24, 0xFF	; 255
     79c:	0b c0       	rjmp	.+22     	; 0x7b4 <read_keypad+0x1fa>
		//else if ((safe_open == 1) && check_password() == -1){ // check if the current password is not set correctly
			//password_reset = 3; // generic flag to indicate that the password is set correctly
		//}
		break;
		case 15:
		LCD_String("+");
     79e:	86 ed       	ldi	r24, 0xD6	; 214
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
	// Wait for the data to be available
	while (!(PIND & (1 << PD2)));

	// Read the data from the keypad
	int value = PINB;
	int data = 255; // initialize to a default value
     7a6:	8f ef       	ldi	r24, 0xFF	; 255
			//password_reset = 3; // generic flag to indicate that the password is set correctly
		//}
		break;
		case 15:
		LCD_String("+");
		break;
     7a8:	05 c0       	rjmp	.+10     	; 0x7b4 <read_keypad+0x1fa>
	// Wait for the data to be available
	while (!(PIND & (1 << PD2)));

	// Read the data from the keypad
	int value = PINB;
	int data = 255; // initialize to a default value
     7aa:	8f ef       	ldi	r24, 0xFF	; 255
     7ac:	03 c0       	rjmp	.+6      	; 0x7b4 <read_keypad+0x1fa>
     7ae:	8f ef       	ldi	r24, 0xFF	; 255
     7b0:	01 c0       	rjmp	.+2      	; 0x7b4 <read_keypad+0x1fa>
     7b2:	8f ef       	ldi	r24, 0xFF	; 255
     7b4:	2f ef       	ldi	r18, 0xFF	; 255
     7b6:	34 e3       	ldi	r19, 0x34	; 52
     7b8:	9c e0       	ldi	r25, 0x0C	; 12
     7ba:	21 50       	subi	r18, 0x01	; 1
     7bc:	30 40       	sbci	r19, 0x00	; 0
     7be:	90 40       	sbci	r25, 0x00	; 0
     7c0:	e1 f7       	brne	.-8      	; 0x7ba <read_keypad+0x200>
     7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <read_keypad+0x20a>
     7c4:	00 00       	nop

	// Debounce delay
	_delay_ms(500);

	return data;
}
     7c6:	08 95       	ret

000007c8 <main>:
void keystroke(void);


int main(void)
{	
	DDRD |= (1 << PD5) | (1 << PD6); // set PD5 and PD6 as output
     7c8:	81 b3       	in	r24, 0x11	; 17
     7ca:	80 66       	ori	r24, 0x60	; 96
     7cc:	81 bb       	out	0x11, r24	; 17
	// Set PD7 as an output
    DDRD |= (1 << BUZZER_PIN);
     7ce:	81 b3       	in	r24, 0x11	; 17
     7d0:	80 68       	ori	r24, 0x80	; 128
     7d2:	81 bb       	out	0x11, r24	; 17
	
	// Write the array to EEPROM
    //eeprom_write_block((const void*)stored_password, (void*)0, sizeof(stored_password));

	LCD_Init();
     7d4:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Init>
	LCD_String("Enter Password: ");
     7d8:	8e e7       	ldi	r24, 0x7E	; 126
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
	LCD_Cmd(0xC0);
     7e0:	80 ec       	ldi	r24, 0xC0	; 192
     7e2:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Cmd>
	BIRG(2); // Safe starts as locked
     7e6:	82 e0       	ldi	r24, 0x02	; 2
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 03 01 	call	0x206	; 0x206 <BIRG>
	
	// Configure INT0 and INT1 interrupts to trigger on rising edge
	GICR |= (1 << INT0) | (1 << INT1);
     7ee:	8b b7       	in	r24, 0x3b	; 59
     7f0:	80 6c       	ori	r24, 0xC0	; 192
     7f2:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC00) | (1 << ISC11) | (1 << ISC10);
     7f4:	85 b7       	in	r24, 0x35	; 53
     7f6:	8d 60       	ori	r24, 0x0D	; 13
     7f8:	85 bf       	out	0x35, r24	; 53
	sei(); /* Enable Global Interrupt */
     7fa:	78 94       	sei
	
	// Initialize the BIRG

	while (1)
	{
		if (password_reset==0){//being entered normally
     7fc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     800:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
     804:	89 2b       	or	r24, r25
     806:	d1 f7       	brne	.-12     	; 0x7fc <main+0x34>
			key_code = read_keypad();
     808:	0e 94 dd 02 	call	0x5ba	; 0x5ba <read_keypad>
     80c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <key_code>
			if (key_code != 255){
     810:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <key_code>
     814:	8f 3f       	cpi	r24, 0xFF	; 255
     816:	91 f3       	breq	.-28     	; 0x7fc <main+0x34>
				input_password[count] = key_code;
     818:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <count>
     81c:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <count+0x1>
     820:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <key_code>
     824:	fc 01       	movw	r30, r24
     826:	ec 59       	subi	r30, 0x9C	; 156
     828:	ff 4f       	sbci	r31, 0xFF	; 255
     82a:	20 83       	st	Z, r18
				count ++;
     82c:	01 96       	adiw	r24, 0x01	; 1
     82e:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <count+0x1>
     832:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <count>
				if (count == 4){
     836:	04 97       	sbiw	r24, 0x04	; 4
     838:	09 f7       	brne	.-62     	; 0x7fc <main+0x34>
					// display the password entered
					count = 0;
     83a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <count+0x1>
     83e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <count>
					password_entered = 1;
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <password_entered+0x1>
     84a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <password_entered>
     84e:	d6 cf       	rjmp	.-84     	; 0x7fc <main+0x34>

00000850 <keystroke>:
		}		
	}
}

void keystroke(void)
{
     850:	cf 93       	push	r28
     852:	df 93       	push	r29
	int pos = 0;
     854:	c0 e0       	ldi	r28, 0x00	; 0
     856:	d0 e0       	ldi	r29, 0x00	; 0
	while (1){
		key_code = read_keypad();
     858:	0e 94 dd 02 	call	0x5ba	; 0x5ba <read_keypad>
     85c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <key_code>
		if (key_code != 255){
     860:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <key_code>
     864:	8f 3f       	cpi	r24, 0xFF	; 255
     866:	c1 f3       	breq	.-16     	; 0x858 <keystroke+0x8>
			input_password[pos] = key_code;
     868:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <key_code>
     86c:	fe 01       	movw	r30, r28
     86e:	ec 59       	subi	r30, 0x9C	; 156
     870:	ff 4f       	sbci	r31, 0xFF	; 255
     872:	80 83       	st	Z, r24
			pos ++;
     874:	21 96       	adiw	r28, 0x01	; 1
			if (pos == 4){
     876:	c4 30       	cpi	r28, 0x04	; 4
     878:	d1 05       	cpc	r29, r1
     87a:	71 f7       	brne	.-36     	; 0x858 <keystroke+0x8>
				//password_entered = 1;
				break;
			}
		}
	}
}
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	08 95       	ret

00000882 <change_password>:
}

// When on/c is pressed change the
void change_password(void){
	// ask for current password
	LCD_Clear();
     882:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_Clear>
	LCD_String("Current Password!!");
     886:	88 ed       	ldi	r24, 0xD8	; 216
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
	LCD_Cmd(0xC0);
     88e:	80 ec       	ldi	r24, 0xC0	; 192
     890:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Cmd>
	// wait for the user to enter the current password
	//password_reset = 23; // password has not been reset
	//key_code = read_keypad();
	keystroke();
     894:	0e 94 28 04 	call	0x850	; 0x850 <keystroke>
	// check if the password is correct
	//LCD_String("TEST");
	if (check_password() == 1){ // correct password
     898:	0e 94 bc 02 	call	0x578	; 0x578 <check_password>
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	91 f4       	brne	.+36     	; 0x8c4 <change_password+0x42>
		LCD_Clear();
     8a0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_Clear>
		LCD_String("Enter New CODE: ");
     8a4:	8b ee       	ldi	r24, 0xEB	; 235
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
		LCD_Cmd(0xC0);
     8ac:	80 ec       	ldi	r24, 0xC0	; 192
     8ae:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_Cmd>
		password_reset = 1; // password has been reset
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
     8ba:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
		// ask for the new password
		//key_code = read_keypad();
		keystroke();
     8be:	0e 94 28 04 	call	0x850	; 0x850 <keystroke>
     8c2:	08 95       	ret
	}
	else if (check_password() == -1){ // incorrect password
     8c4:	0e 94 bc 02 	call	0x578	; 0x578 <check_password>
     8c8:	01 96       	adiw	r24, 0x01	; 1
     8ca:	09 f5       	brne	.+66     	; 0x90e <change_password+0x8c>
		LCD_Clear();
     8cc:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_Clear>
		LCD_String("Wrong Password");
     8d0:	8c ef       	ldi	r24, 0xFC	; 252
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
     8d8:	8f ef       	ldi	r24, 0xFF	; 255
     8da:	99 e6       	ldi	r25, 0x69	; 105
     8dc:	28 e1       	ldi	r18, 0x18	; 24
     8de:	81 50       	subi	r24, 0x01	; 1
     8e0:	90 40       	sbci	r25, 0x00	; 0
     8e2:	20 40       	sbci	r18, 0x00	; 0
     8e4:	e1 f7       	brne	.-8      	; 0x8de <change_password+0x5c>
     8e6:	00 c0       	rjmp	.+0      	; 0x8e8 <change_password+0x66>
     8e8:	00 00       	nop
		_delay_ms(1000);
		LCD_Clear();
     8ea:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_Clear>
		LCD_String("OPEN MODE");
     8ee:	88 e6       	ldi	r24, 0x68	; 104
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_String>
		BIRG(0); // open the safe
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	0e 94 03 01 	call	0x206	; 0x206 <BIRG>
		latch_state = 0;
     8fe:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <latch_state>
		safe_open = 1;
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <safe_open+0x1>
     90a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <safe_open>
     90e:	08 95       	ret

00000910 <__vector_1>:
	}
}



ISR(INT0_vect){
     910:	1f 92       	push	r1
     912:	0f 92       	push	r0
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	0f 92       	push	r0
     918:	11 24       	eor	r1, r1
     91a:	2f 93       	push	r18
     91c:	3f 93       	push	r19
     91e:	4f 93       	push	r20
     920:	5f 93       	push	r21
     922:	6f 93       	push	r22
     924:	7f 93       	push	r23
     926:	8f 93       	push	r24
     928:	9f 93       	push	r25
     92a:	af 93       	push	r26
     92c:	bf 93       	push	r27
     92e:	ef 93       	push	r30
     930:	ff 93       	push	r31
	// Check if password is being reset or entered
	if (password_reset == 1){
     932:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
     936:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
     93a:	01 97       	sbiw	r24, 0x01	; 1
     93c:	31 f4       	brne	.+12     	; 0x94a <__vector_1+0x3a>
		count = 0;
     93e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <count+0x1>
     942:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <count>
		change_password();
     946:	0e 94 41 04 	call	0x882	; 0x882 <change_password>
	}
}
     94a:	ff 91       	pop	r31
     94c:	ef 91       	pop	r30
     94e:	bf 91       	pop	r27
     950:	af 91       	pop	r26
     952:	9f 91       	pop	r25
     954:	8f 91       	pop	r24
     956:	7f 91       	pop	r23
     958:	6f 91       	pop	r22
     95a:	5f 91       	pop	r21
     95c:	4f 91       	pop	r20
     95e:	3f 91       	pop	r19
     960:	2f 91       	pop	r18
     962:	0f 90       	pop	r0
     964:	0f be       	out	0x3f, r0	; 63
     966:	0f 90       	pop	r0
     968:	1f 90       	pop	r1
     96a:	18 95       	reti

0000096c <__subsf3>:
     96c:	50 58       	subi	r21, 0x80	; 128

0000096e <__addsf3>:
     96e:	bb 27       	eor	r27, r27
     970:	aa 27       	eor	r26, r26
     972:	0e 94 ce 04 	call	0x99c	; 0x99c <__addsf3x>
     976:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_round>
     97a:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fp_pscA>
     97e:	38 f0       	brcs	.+14     	; 0x98e <__addsf3+0x20>
     980:	0e 94 11 06 	call	0xc22	; 0xc22 <__fp_pscB>
     984:	20 f0       	brcs	.+8      	; 0x98e <__addsf3+0x20>
     986:	39 f4       	brne	.+14     	; 0x996 <__addsf3+0x28>
     988:	9f 3f       	cpi	r25, 0xFF	; 255
     98a:	19 f4       	brne	.+6      	; 0x992 <__addsf3+0x24>
     98c:	26 f4       	brtc	.+8      	; 0x996 <__addsf3+0x28>
     98e:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__fp_nan>
     992:	0e f4       	brtc	.+2      	; 0x996 <__addsf3+0x28>
     994:	e0 95       	com	r30
     996:	e7 fb       	bst	r30, 7
     998:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__fp_inf>

0000099c <__addsf3x>:
     99c:	e9 2f       	mov	r30, r25
     99e:	0e 94 29 06 	call	0xc52	; 0xc52 <__fp_split3>
     9a2:	58 f3       	brcs	.-42     	; 0x97a <__addsf3+0xc>
     9a4:	ba 17       	cp	r27, r26
     9a6:	62 07       	cpc	r22, r18
     9a8:	73 07       	cpc	r23, r19
     9aa:	84 07       	cpc	r24, r20
     9ac:	95 07       	cpc	r25, r21
     9ae:	20 f0       	brcs	.+8      	; 0x9b8 <__addsf3x+0x1c>
     9b0:	79 f4       	brne	.+30     	; 0x9d0 <__addsf3x+0x34>
     9b2:	a6 f5       	brtc	.+104    	; 0xa1c <__addsf3x+0x80>
     9b4:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__fp_zero>
     9b8:	0e f4       	brtc	.+2      	; 0x9bc <__addsf3x+0x20>
     9ba:	e0 95       	com	r30
     9bc:	0b 2e       	mov	r0, r27
     9be:	ba 2f       	mov	r27, r26
     9c0:	a0 2d       	mov	r26, r0
     9c2:	0b 01       	movw	r0, r22
     9c4:	b9 01       	movw	r22, r18
     9c6:	90 01       	movw	r18, r0
     9c8:	0c 01       	movw	r0, r24
     9ca:	ca 01       	movw	r24, r20
     9cc:	a0 01       	movw	r20, r0
     9ce:	11 24       	eor	r1, r1
     9d0:	ff 27       	eor	r31, r31
     9d2:	59 1b       	sub	r21, r25
     9d4:	99 f0       	breq	.+38     	; 0x9fc <__addsf3x+0x60>
     9d6:	59 3f       	cpi	r21, 0xF9	; 249
     9d8:	50 f4       	brcc	.+20     	; 0x9ee <__addsf3x+0x52>
     9da:	50 3e       	cpi	r21, 0xE0	; 224
     9dc:	68 f1       	brcs	.+90     	; 0xa38 <__addsf3x+0x9c>
     9de:	1a 16       	cp	r1, r26
     9e0:	f0 40       	sbci	r31, 0x00	; 0
     9e2:	a2 2f       	mov	r26, r18
     9e4:	23 2f       	mov	r18, r19
     9e6:	34 2f       	mov	r19, r20
     9e8:	44 27       	eor	r20, r20
     9ea:	58 5f       	subi	r21, 0xF8	; 248
     9ec:	f3 cf       	rjmp	.-26     	; 0x9d4 <__addsf3x+0x38>
     9ee:	46 95       	lsr	r20
     9f0:	37 95       	ror	r19
     9f2:	27 95       	ror	r18
     9f4:	a7 95       	ror	r26
     9f6:	f0 40       	sbci	r31, 0x00	; 0
     9f8:	53 95       	inc	r21
     9fa:	c9 f7       	brne	.-14     	; 0x9ee <__addsf3x+0x52>
     9fc:	7e f4       	brtc	.+30     	; 0xa1c <__addsf3x+0x80>
     9fe:	1f 16       	cp	r1, r31
     a00:	ba 0b       	sbc	r27, r26
     a02:	62 0b       	sbc	r22, r18
     a04:	73 0b       	sbc	r23, r19
     a06:	84 0b       	sbc	r24, r20
     a08:	ba f0       	brmi	.+46     	; 0xa38 <__addsf3x+0x9c>
     a0a:	91 50       	subi	r25, 0x01	; 1
     a0c:	a1 f0       	breq	.+40     	; 0xa36 <__addsf3x+0x9a>
     a0e:	ff 0f       	add	r31, r31
     a10:	bb 1f       	adc	r27, r27
     a12:	66 1f       	adc	r22, r22
     a14:	77 1f       	adc	r23, r23
     a16:	88 1f       	adc	r24, r24
     a18:	c2 f7       	brpl	.-16     	; 0xa0a <__addsf3x+0x6e>
     a1a:	0e c0       	rjmp	.+28     	; 0xa38 <__addsf3x+0x9c>
     a1c:	ba 0f       	add	r27, r26
     a1e:	62 1f       	adc	r22, r18
     a20:	73 1f       	adc	r23, r19
     a22:	84 1f       	adc	r24, r20
     a24:	48 f4       	brcc	.+18     	; 0xa38 <__addsf3x+0x9c>
     a26:	87 95       	ror	r24
     a28:	77 95       	ror	r23
     a2a:	67 95       	ror	r22
     a2c:	b7 95       	ror	r27
     a2e:	f7 95       	ror	r31
     a30:	9e 3f       	cpi	r25, 0xFE	; 254
     a32:	08 f0       	brcs	.+2      	; 0xa36 <__addsf3x+0x9a>
     a34:	b0 cf       	rjmp	.-160    	; 0x996 <__addsf3+0x28>
     a36:	93 95       	inc	r25
     a38:	88 0f       	add	r24, r24
     a3a:	08 f0       	brcs	.+2      	; 0xa3e <__addsf3x+0xa2>
     a3c:	99 27       	eor	r25, r25
     a3e:	ee 0f       	add	r30, r30
     a40:	97 95       	ror	r25
     a42:	87 95       	ror	r24
     a44:	08 95       	ret

00000a46 <__divsf3>:
     a46:	0e 94 37 05 	call	0xa6e	; 0xa6e <__divsf3x>
     a4a:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_round>
     a4e:	0e 94 11 06 	call	0xc22	; 0xc22 <__fp_pscB>
     a52:	58 f0       	brcs	.+22     	; 0xa6a <__divsf3+0x24>
     a54:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fp_pscA>
     a58:	40 f0       	brcs	.+16     	; 0xa6a <__divsf3+0x24>
     a5a:	29 f4       	brne	.+10     	; 0xa66 <__divsf3+0x20>
     a5c:	5f 3f       	cpi	r21, 0xFF	; 255
     a5e:	29 f0       	breq	.+10     	; 0xa6a <__divsf3+0x24>
     a60:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__fp_inf>
     a64:	51 11       	cpse	r21, r1
     a66:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__fp_szero>
     a6a:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__fp_nan>

00000a6e <__divsf3x>:
     a6e:	0e 94 29 06 	call	0xc52	; 0xc52 <__fp_split3>
     a72:	68 f3       	brcs	.-38     	; 0xa4e <__divsf3+0x8>

00000a74 <__divsf3_pse>:
     a74:	99 23       	and	r25, r25
     a76:	b1 f3       	breq	.-20     	; 0xa64 <__divsf3+0x1e>
     a78:	55 23       	and	r21, r21
     a7a:	91 f3       	breq	.-28     	; 0xa60 <__divsf3+0x1a>
     a7c:	95 1b       	sub	r25, r21
     a7e:	55 0b       	sbc	r21, r21
     a80:	bb 27       	eor	r27, r27
     a82:	aa 27       	eor	r26, r26
     a84:	62 17       	cp	r22, r18
     a86:	73 07       	cpc	r23, r19
     a88:	84 07       	cpc	r24, r20
     a8a:	38 f0       	brcs	.+14     	; 0xa9a <__divsf3_pse+0x26>
     a8c:	9f 5f       	subi	r25, 0xFF	; 255
     a8e:	5f 4f       	sbci	r21, 0xFF	; 255
     a90:	22 0f       	add	r18, r18
     a92:	33 1f       	adc	r19, r19
     a94:	44 1f       	adc	r20, r20
     a96:	aa 1f       	adc	r26, r26
     a98:	a9 f3       	breq	.-22     	; 0xa84 <__divsf3_pse+0x10>
     a9a:	35 d0       	rcall	.+106    	; 0xb06 <__divsf3_pse+0x92>
     a9c:	0e 2e       	mov	r0, r30
     a9e:	3a f0       	brmi	.+14     	; 0xaae <__divsf3_pse+0x3a>
     aa0:	e0 e8       	ldi	r30, 0x80	; 128
     aa2:	32 d0       	rcall	.+100    	; 0xb08 <__divsf3_pse+0x94>
     aa4:	91 50       	subi	r25, 0x01	; 1
     aa6:	50 40       	sbci	r21, 0x00	; 0
     aa8:	e6 95       	lsr	r30
     aaa:	00 1c       	adc	r0, r0
     aac:	ca f7       	brpl	.-14     	; 0xaa0 <__divsf3_pse+0x2c>
     aae:	2b d0       	rcall	.+86     	; 0xb06 <__divsf3_pse+0x92>
     ab0:	fe 2f       	mov	r31, r30
     ab2:	29 d0       	rcall	.+82     	; 0xb06 <__divsf3_pse+0x92>
     ab4:	66 0f       	add	r22, r22
     ab6:	77 1f       	adc	r23, r23
     ab8:	88 1f       	adc	r24, r24
     aba:	bb 1f       	adc	r27, r27
     abc:	26 17       	cp	r18, r22
     abe:	37 07       	cpc	r19, r23
     ac0:	48 07       	cpc	r20, r24
     ac2:	ab 07       	cpc	r26, r27
     ac4:	b0 e8       	ldi	r27, 0x80	; 128
     ac6:	09 f0       	breq	.+2      	; 0xaca <__divsf3_pse+0x56>
     ac8:	bb 0b       	sbc	r27, r27
     aca:	80 2d       	mov	r24, r0
     acc:	bf 01       	movw	r22, r30
     ace:	ff 27       	eor	r31, r31
     ad0:	93 58       	subi	r25, 0x83	; 131
     ad2:	5f 4f       	sbci	r21, 0xFF	; 255
     ad4:	3a f0       	brmi	.+14     	; 0xae4 <__divsf3_pse+0x70>
     ad6:	9e 3f       	cpi	r25, 0xFE	; 254
     ad8:	51 05       	cpc	r21, r1
     ada:	78 f0       	brcs	.+30     	; 0xafa <__divsf3_pse+0x86>
     adc:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__fp_inf>
     ae0:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__fp_szero>
     ae4:	5f 3f       	cpi	r21, 0xFF	; 255
     ae6:	e4 f3       	brlt	.-8      	; 0xae0 <__divsf3_pse+0x6c>
     ae8:	98 3e       	cpi	r25, 0xE8	; 232
     aea:	d4 f3       	brlt	.-12     	; 0xae0 <__divsf3_pse+0x6c>
     aec:	86 95       	lsr	r24
     aee:	77 95       	ror	r23
     af0:	67 95       	ror	r22
     af2:	b7 95       	ror	r27
     af4:	f7 95       	ror	r31
     af6:	9f 5f       	subi	r25, 0xFF	; 255
     af8:	c9 f7       	brne	.-14     	; 0xaec <__divsf3_pse+0x78>
     afa:	88 0f       	add	r24, r24
     afc:	91 1d       	adc	r25, r1
     afe:	96 95       	lsr	r25
     b00:	87 95       	ror	r24
     b02:	97 f9       	bld	r25, 7
     b04:	08 95       	ret
     b06:	e1 e0       	ldi	r30, 0x01	; 1
     b08:	66 0f       	add	r22, r22
     b0a:	77 1f       	adc	r23, r23
     b0c:	88 1f       	adc	r24, r24
     b0e:	bb 1f       	adc	r27, r27
     b10:	62 17       	cp	r22, r18
     b12:	73 07       	cpc	r23, r19
     b14:	84 07       	cpc	r24, r20
     b16:	ba 07       	cpc	r27, r26
     b18:	20 f0       	brcs	.+8      	; 0xb22 <__divsf3_pse+0xae>
     b1a:	62 1b       	sub	r22, r18
     b1c:	73 0b       	sbc	r23, r19
     b1e:	84 0b       	sbc	r24, r20
     b20:	ba 0b       	sbc	r27, r26
     b22:	ee 1f       	adc	r30, r30
     b24:	88 f7       	brcc	.-30     	; 0xb08 <__divsf3_pse+0x94>
     b26:	e0 95       	com	r30
     b28:	08 95       	ret

00000b2a <__fixunssfsi>:
     b2a:	0e 94 31 06 	call	0xc62	; 0xc62 <__fp_splitA>
     b2e:	88 f0       	brcs	.+34     	; 0xb52 <__fixunssfsi+0x28>
     b30:	9f 57       	subi	r25, 0x7F	; 127
     b32:	98 f0       	brcs	.+38     	; 0xb5a <__fixunssfsi+0x30>
     b34:	b9 2f       	mov	r27, r25
     b36:	99 27       	eor	r25, r25
     b38:	b7 51       	subi	r27, 0x17	; 23
     b3a:	b0 f0       	brcs	.+44     	; 0xb68 <__fixunssfsi+0x3e>
     b3c:	e1 f0       	breq	.+56     	; 0xb76 <__fixunssfsi+0x4c>
     b3e:	66 0f       	add	r22, r22
     b40:	77 1f       	adc	r23, r23
     b42:	88 1f       	adc	r24, r24
     b44:	99 1f       	adc	r25, r25
     b46:	1a f0       	brmi	.+6      	; 0xb4e <__fixunssfsi+0x24>
     b48:	ba 95       	dec	r27
     b4a:	c9 f7       	brne	.-14     	; 0xb3e <__fixunssfsi+0x14>
     b4c:	14 c0       	rjmp	.+40     	; 0xb76 <__fixunssfsi+0x4c>
     b4e:	b1 30       	cpi	r27, 0x01	; 1
     b50:	91 f0       	breq	.+36     	; 0xb76 <__fixunssfsi+0x4c>
     b52:	0e 94 4b 06 	call	0xc96	; 0xc96 <__fp_zero>
     b56:	b1 e0       	ldi	r27, 0x01	; 1
     b58:	08 95       	ret
     b5a:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__fp_zero>
     b5e:	67 2f       	mov	r22, r23
     b60:	78 2f       	mov	r23, r24
     b62:	88 27       	eor	r24, r24
     b64:	b8 5f       	subi	r27, 0xF8	; 248
     b66:	39 f0       	breq	.+14     	; 0xb76 <__fixunssfsi+0x4c>
     b68:	b9 3f       	cpi	r27, 0xF9	; 249
     b6a:	cc f3       	brlt	.-14     	; 0xb5e <__fixunssfsi+0x34>
     b6c:	86 95       	lsr	r24
     b6e:	77 95       	ror	r23
     b70:	67 95       	ror	r22
     b72:	b3 95       	inc	r27
     b74:	d9 f7       	brne	.-10     	; 0xb6c <__fixunssfsi+0x42>
     b76:	3e f4       	brtc	.+14     	; 0xb86 <__fixunssfsi+0x5c>
     b78:	90 95       	com	r25
     b7a:	80 95       	com	r24
     b7c:	70 95       	com	r23
     b7e:	61 95       	neg	r22
     b80:	7f 4f       	sbci	r23, 0xFF	; 255
     b82:	8f 4f       	sbci	r24, 0xFF	; 255
     b84:	9f 4f       	sbci	r25, 0xFF	; 255
     b86:	08 95       	ret

00000b88 <__floatunsisf>:
     b88:	e8 94       	clt
     b8a:	09 c0       	rjmp	.+18     	; 0xb9e <__floatsisf+0x12>

00000b8c <__floatsisf>:
     b8c:	97 fb       	bst	r25, 7
     b8e:	3e f4       	brtc	.+14     	; 0xb9e <__floatsisf+0x12>
     b90:	90 95       	com	r25
     b92:	80 95       	com	r24
     b94:	70 95       	com	r23
     b96:	61 95       	neg	r22
     b98:	7f 4f       	sbci	r23, 0xFF	; 255
     b9a:	8f 4f       	sbci	r24, 0xFF	; 255
     b9c:	9f 4f       	sbci	r25, 0xFF	; 255
     b9e:	99 23       	and	r25, r25
     ba0:	a9 f0       	breq	.+42     	; 0xbcc <__floatsisf+0x40>
     ba2:	f9 2f       	mov	r31, r25
     ba4:	96 e9       	ldi	r25, 0x96	; 150
     ba6:	bb 27       	eor	r27, r27
     ba8:	93 95       	inc	r25
     baa:	f6 95       	lsr	r31
     bac:	87 95       	ror	r24
     bae:	77 95       	ror	r23
     bb0:	67 95       	ror	r22
     bb2:	b7 95       	ror	r27
     bb4:	f1 11       	cpse	r31, r1
     bb6:	f8 cf       	rjmp	.-16     	; 0xba8 <__floatsisf+0x1c>
     bb8:	fa f4       	brpl	.+62     	; 0xbf8 <__floatsisf+0x6c>
     bba:	bb 0f       	add	r27, r27
     bbc:	11 f4       	brne	.+4      	; 0xbc2 <__floatsisf+0x36>
     bbe:	60 ff       	sbrs	r22, 0
     bc0:	1b c0       	rjmp	.+54     	; 0xbf8 <__floatsisf+0x6c>
     bc2:	6f 5f       	subi	r22, 0xFF	; 255
     bc4:	7f 4f       	sbci	r23, 0xFF	; 255
     bc6:	8f 4f       	sbci	r24, 0xFF	; 255
     bc8:	9f 4f       	sbci	r25, 0xFF	; 255
     bca:	16 c0       	rjmp	.+44     	; 0xbf8 <__floatsisf+0x6c>
     bcc:	88 23       	and	r24, r24
     bce:	11 f0       	breq	.+4      	; 0xbd4 <__floatsisf+0x48>
     bd0:	96 e9       	ldi	r25, 0x96	; 150
     bd2:	11 c0       	rjmp	.+34     	; 0xbf6 <__floatsisf+0x6a>
     bd4:	77 23       	and	r23, r23
     bd6:	21 f0       	breq	.+8      	; 0xbe0 <__floatsisf+0x54>
     bd8:	9e e8       	ldi	r25, 0x8E	; 142
     bda:	87 2f       	mov	r24, r23
     bdc:	76 2f       	mov	r23, r22
     bde:	05 c0       	rjmp	.+10     	; 0xbea <__floatsisf+0x5e>
     be0:	66 23       	and	r22, r22
     be2:	71 f0       	breq	.+28     	; 0xc00 <__floatsisf+0x74>
     be4:	96 e8       	ldi	r25, 0x86	; 134
     be6:	86 2f       	mov	r24, r22
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	2a f0       	brmi	.+10     	; 0xbf8 <__floatsisf+0x6c>
     bee:	9a 95       	dec	r25
     bf0:	66 0f       	add	r22, r22
     bf2:	77 1f       	adc	r23, r23
     bf4:	88 1f       	adc	r24, r24
     bf6:	da f7       	brpl	.-10     	; 0xbee <__floatsisf+0x62>
     bf8:	88 0f       	add	r24, r24
     bfa:	96 95       	lsr	r25
     bfc:	87 95       	ror	r24
     bfe:	97 f9       	bld	r25, 7
     c00:	08 95       	ret

00000c02 <__fp_inf>:
     c02:	97 f9       	bld	r25, 7
     c04:	9f 67       	ori	r25, 0x7F	; 127
     c06:	80 e8       	ldi	r24, 0x80	; 128
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	08 95       	ret

00000c0e <__fp_nan>:
     c0e:	9f ef       	ldi	r25, 0xFF	; 255
     c10:	80 ec       	ldi	r24, 0xC0	; 192
     c12:	08 95       	ret

00000c14 <__fp_pscA>:
     c14:	00 24       	eor	r0, r0
     c16:	0a 94       	dec	r0
     c18:	16 16       	cp	r1, r22
     c1a:	17 06       	cpc	r1, r23
     c1c:	18 06       	cpc	r1, r24
     c1e:	09 06       	cpc	r0, r25
     c20:	08 95       	ret

00000c22 <__fp_pscB>:
     c22:	00 24       	eor	r0, r0
     c24:	0a 94       	dec	r0
     c26:	12 16       	cp	r1, r18
     c28:	13 06       	cpc	r1, r19
     c2a:	14 06       	cpc	r1, r20
     c2c:	05 06       	cpc	r0, r21
     c2e:	08 95       	ret

00000c30 <__fp_round>:
     c30:	09 2e       	mov	r0, r25
     c32:	03 94       	inc	r0
     c34:	00 0c       	add	r0, r0
     c36:	11 f4       	brne	.+4      	; 0xc3c <__fp_round+0xc>
     c38:	88 23       	and	r24, r24
     c3a:	52 f0       	brmi	.+20     	; 0xc50 <__fp_round+0x20>
     c3c:	bb 0f       	add	r27, r27
     c3e:	40 f4       	brcc	.+16     	; 0xc50 <__fp_round+0x20>
     c40:	bf 2b       	or	r27, r31
     c42:	11 f4       	brne	.+4      	; 0xc48 <__fp_round+0x18>
     c44:	60 ff       	sbrs	r22, 0
     c46:	04 c0       	rjmp	.+8      	; 0xc50 <__fp_round+0x20>
     c48:	6f 5f       	subi	r22, 0xFF	; 255
     c4a:	7f 4f       	sbci	r23, 0xFF	; 255
     c4c:	8f 4f       	sbci	r24, 0xFF	; 255
     c4e:	9f 4f       	sbci	r25, 0xFF	; 255
     c50:	08 95       	ret

00000c52 <__fp_split3>:
     c52:	57 fd       	sbrc	r21, 7
     c54:	90 58       	subi	r25, 0x80	; 128
     c56:	44 0f       	add	r20, r20
     c58:	55 1f       	adc	r21, r21
     c5a:	59 f0       	breq	.+22     	; 0xc72 <__fp_splitA+0x10>
     c5c:	5f 3f       	cpi	r21, 0xFF	; 255
     c5e:	71 f0       	breq	.+28     	; 0xc7c <__fp_splitA+0x1a>
     c60:	47 95       	ror	r20

00000c62 <__fp_splitA>:
     c62:	88 0f       	add	r24, r24
     c64:	97 fb       	bst	r25, 7
     c66:	99 1f       	adc	r25, r25
     c68:	61 f0       	breq	.+24     	; 0xc82 <__fp_splitA+0x20>
     c6a:	9f 3f       	cpi	r25, 0xFF	; 255
     c6c:	79 f0       	breq	.+30     	; 0xc8c <__fp_splitA+0x2a>
     c6e:	87 95       	ror	r24
     c70:	08 95       	ret
     c72:	12 16       	cp	r1, r18
     c74:	13 06       	cpc	r1, r19
     c76:	14 06       	cpc	r1, r20
     c78:	55 1f       	adc	r21, r21
     c7a:	f2 cf       	rjmp	.-28     	; 0xc60 <__fp_split3+0xe>
     c7c:	46 95       	lsr	r20
     c7e:	f1 df       	rcall	.-30     	; 0xc62 <__fp_splitA>
     c80:	08 c0       	rjmp	.+16     	; 0xc92 <__fp_splitA+0x30>
     c82:	16 16       	cp	r1, r22
     c84:	17 06       	cpc	r1, r23
     c86:	18 06       	cpc	r1, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	f1 cf       	rjmp	.-30     	; 0xc6e <__fp_splitA+0xc>
     c8c:	86 95       	lsr	r24
     c8e:	71 05       	cpc	r23, r1
     c90:	61 05       	cpc	r22, r1
     c92:	08 94       	sec
     c94:	08 95       	ret

00000c96 <__fp_zero>:
     c96:	e8 94       	clt

00000c98 <__fp_szero>:
     c98:	bb 27       	eor	r27, r27
     c9a:	66 27       	eor	r22, r22
     c9c:	77 27       	eor	r23, r23
     c9e:	cb 01       	movw	r24, r22
     ca0:	97 f9       	bld	r25, 7
     ca2:	08 95       	ret

00000ca4 <__mulsf3>:
     ca4:	0e 94 65 06 	call	0xcca	; 0xcca <__mulsf3x>
     ca8:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__fp_round>
     cac:	0e 94 0a 06 	call	0xc14	; 0xc14 <__fp_pscA>
     cb0:	38 f0       	brcs	.+14     	; 0xcc0 <__mulsf3+0x1c>
     cb2:	0e 94 11 06 	call	0xc22	; 0xc22 <__fp_pscB>
     cb6:	20 f0       	brcs	.+8      	; 0xcc0 <__mulsf3+0x1c>
     cb8:	95 23       	and	r25, r21
     cba:	11 f0       	breq	.+4      	; 0xcc0 <__mulsf3+0x1c>
     cbc:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__fp_inf>
     cc0:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__fp_nan>
     cc4:	11 24       	eor	r1, r1
     cc6:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__fp_szero>

00000cca <__mulsf3x>:
     cca:	0e 94 29 06 	call	0xc52	; 0xc52 <__fp_split3>
     cce:	70 f3       	brcs	.-36     	; 0xcac <__mulsf3+0x8>

00000cd0 <__mulsf3_pse>:
     cd0:	95 9f       	mul	r25, r21
     cd2:	c1 f3       	breq	.-16     	; 0xcc4 <__mulsf3+0x20>
     cd4:	95 0f       	add	r25, r21
     cd6:	50 e0       	ldi	r21, 0x00	; 0
     cd8:	55 1f       	adc	r21, r21
     cda:	62 9f       	mul	r22, r18
     cdc:	f0 01       	movw	r30, r0
     cde:	72 9f       	mul	r23, r18
     ce0:	bb 27       	eor	r27, r27
     ce2:	f0 0d       	add	r31, r0
     ce4:	b1 1d       	adc	r27, r1
     ce6:	63 9f       	mul	r22, r19
     ce8:	aa 27       	eor	r26, r26
     cea:	f0 0d       	add	r31, r0
     cec:	b1 1d       	adc	r27, r1
     cee:	aa 1f       	adc	r26, r26
     cf0:	64 9f       	mul	r22, r20
     cf2:	66 27       	eor	r22, r22
     cf4:	b0 0d       	add	r27, r0
     cf6:	a1 1d       	adc	r26, r1
     cf8:	66 1f       	adc	r22, r22
     cfa:	82 9f       	mul	r24, r18
     cfc:	22 27       	eor	r18, r18
     cfe:	b0 0d       	add	r27, r0
     d00:	a1 1d       	adc	r26, r1
     d02:	62 1f       	adc	r22, r18
     d04:	73 9f       	mul	r23, r19
     d06:	b0 0d       	add	r27, r0
     d08:	a1 1d       	adc	r26, r1
     d0a:	62 1f       	adc	r22, r18
     d0c:	83 9f       	mul	r24, r19
     d0e:	a0 0d       	add	r26, r0
     d10:	61 1d       	adc	r22, r1
     d12:	22 1f       	adc	r18, r18
     d14:	74 9f       	mul	r23, r20
     d16:	33 27       	eor	r19, r19
     d18:	a0 0d       	add	r26, r0
     d1a:	61 1d       	adc	r22, r1
     d1c:	23 1f       	adc	r18, r19
     d1e:	84 9f       	mul	r24, r20
     d20:	60 0d       	add	r22, r0
     d22:	21 1d       	adc	r18, r1
     d24:	82 2f       	mov	r24, r18
     d26:	76 2f       	mov	r23, r22
     d28:	6a 2f       	mov	r22, r26
     d2a:	11 24       	eor	r1, r1
     d2c:	9f 57       	subi	r25, 0x7F	; 127
     d2e:	50 40       	sbci	r21, 0x00	; 0
     d30:	9a f0       	brmi	.+38     	; 0xd58 <__mulsf3_pse+0x88>
     d32:	f1 f0       	breq	.+60     	; 0xd70 <__mulsf3_pse+0xa0>
     d34:	88 23       	and	r24, r24
     d36:	4a f0       	brmi	.+18     	; 0xd4a <__mulsf3_pse+0x7a>
     d38:	ee 0f       	add	r30, r30
     d3a:	ff 1f       	adc	r31, r31
     d3c:	bb 1f       	adc	r27, r27
     d3e:	66 1f       	adc	r22, r22
     d40:	77 1f       	adc	r23, r23
     d42:	88 1f       	adc	r24, r24
     d44:	91 50       	subi	r25, 0x01	; 1
     d46:	50 40       	sbci	r21, 0x00	; 0
     d48:	a9 f7       	brne	.-22     	; 0xd34 <__mulsf3_pse+0x64>
     d4a:	9e 3f       	cpi	r25, 0xFE	; 254
     d4c:	51 05       	cpc	r21, r1
     d4e:	80 f0       	brcs	.+32     	; 0xd70 <__mulsf3_pse+0xa0>
     d50:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__fp_inf>
     d54:	0c 94 4c 06 	jmp	0xc98	; 0xc98 <__fp_szero>
     d58:	5f 3f       	cpi	r21, 0xFF	; 255
     d5a:	e4 f3       	brlt	.-8      	; 0xd54 <__mulsf3_pse+0x84>
     d5c:	98 3e       	cpi	r25, 0xE8	; 232
     d5e:	d4 f3       	brlt	.-12     	; 0xd54 <__mulsf3_pse+0x84>
     d60:	86 95       	lsr	r24
     d62:	77 95       	ror	r23
     d64:	67 95       	ror	r22
     d66:	b7 95       	ror	r27
     d68:	f7 95       	ror	r31
     d6a:	e7 95       	ror	r30
     d6c:	9f 5f       	subi	r25, 0xFF	; 255
     d6e:	c1 f7       	brne	.-16     	; 0xd60 <__mulsf3_pse+0x90>
     d70:	fe 2b       	or	r31, r30
     d72:	88 0f       	add	r24, r24
     d74:	91 1d       	adc	r25, r1
     d76:	96 95       	lsr	r25
     d78:	87 95       	ror	r24
     d7a:	97 f9       	bld	r25, 7
     d7c:	08 95       	ret

00000d7e <sin>:
     d7e:	9f 93       	push	r25
     d80:	0e 94 c9 06 	call	0xd92	; 0xd92 <__fp_rempio2>
     d84:	0f 90       	pop	r0
     d86:	07 fc       	sbrc	r0, 7
     d88:	ee 5f       	subi	r30, 0xFE	; 254
     d8a:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__fp_sinus>
     d8e:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__fp_nan>

00000d92 <__fp_rempio2>:
     d92:	0e 94 31 06 	call	0xc62	; 0xc62 <__fp_splitA>
     d96:	d8 f3       	brcs	.-10     	; 0xd8e <sin+0x10>
     d98:	e8 94       	clt
     d9a:	e0 e0       	ldi	r30, 0x00	; 0
     d9c:	bb 27       	eor	r27, r27
     d9e:	9f 57       	subi	r25, 0x7F	; 127
     da0:	f0 f0       	brcs	.+60     	; 0xdde <__fp_rempio2+0x4c>
     da2:	2a ed       	ldi	r18, 0xDA	; 218
     da4:	3f e0       	ldi	r19, 0x0F	; 15
     da6:	49 ec       	ldi	r20, 0xC9	; 201
     da8:	06 c0       	rjmp	.+12     	; 0xdb6 <__fp_rempio2+0x24>
     daa:	ee 0f       	add	r30, r30
     dac:	bb 0f       	add	r27, r27
     dae:	66 1f       	adc	r22, r22
     db0:	77 1f       	adc	r23, r23
     db2:	88 1f       	adc	r24, r24
     db4:	28 f0       	brcs	.+10     	; 0xdc0 <__fp_rempio2+0x2e>
     db6:	b2 3a       	cpi	r27, 0xA2	; 162
     db8:	62 07       	cpc	r22, r18
     dba:	73 07       	cpc	r23, r19
     dbc:	84 07       	cpc	r24, r20
     dbe:	28 f0       	brcs	.+10     	; 0xdca <__fp_rempio2+0x38>
     dc0:	b2 5a       	subi	r27, 0xA2	; 162
     dc2:	62 0b       	sbc	r22, r18
     dc4:	73 0b       	sbc	r23, r19
     dc6:	84 0b       	sbc	r24, r20
     dc8:	e3 95       	inc	r30
     dca:	9a 95       	dec	r25
     dcc:	72 f7       	brpl	.-36     	; 0xdaa <__fp_rempio2+0x18>
     dce:	80 38       	cpi	r24, 0x80	; 128
     dd0:	30 f4       	brcc	.+12     	; 0xdde <__fp_rempio2+0x4c>
     dd2:	9a 95       	dec	r25
     dd4:	bb 0f       	add	r27, r27
     dd6:	66 1f       	adc	r22, r22
     dd8:	77 1f       	adc	r23, r23
     dda:	88 1f       	adc	r24, r24
     ddc:	d2 f7       	brpl	.-12     	; 0xdd2 <__fp_rempio2+0x40>
     dde:	90 48       	sbci	r25, 0x80	; 128
     de0:	0c 94 08 07 	jmp	0xe10	; 0xe10 <__fp_mpack_finite>

00000de4 <__fp_sinus>:
     de4:	ef 93       	push	r30
     de6:	e0 ff       	sbrs	r30, 0
     de8:	07 c0       	rjmp	.+14     	; 0xdf8 <__fp_sinus+0x14>
     dea:	a2 ea       	ldi	r26, 0xA2	; 162
     dec:	2a ed       	ldi	r18, 0xDA	; 218
     dee:	3f e0       	ldi	r19, 0x0F	; 15
     df0:	49 ec       	ldi	r20, 0xC9	; 201
     df2:	5f eb       	ldi	r21, 0xBF	; 191
     df4:	0e 94 ce 04 	call	0x99c	; 0x99c <__addsf3x>
     df8:	0e 94 18 06 	call	0xc30	; 0xc30 <__fp_round>
     dfc:	0f 90       	pop	r0
     dfe:	03 94       	inc	r0
     e00:	01 fc       	sbrc	r0, 1
     e02:	90 58       	subi	r25, 0x80	; 128
     e04:	e4 e7       	ldi	r30, 0x74	; 116
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_powsodd>

00000e0c <__fp_mpack>:
     e0c:	9f 3f       	cpi	r25, 0xFF	; 255
     e0e:	31 f0       	breq	.+12     	; 0xe1c <__fp_mpack_finite+0xc>

00000e10 <__fp_mpack_finite>:
     e10:	91 50       	subi	r25, 0x01	; 1
     e12:	20 f4       	brcc	.+8      	; 0xe1c <__fp_mpack_finite+0xc>
     e14:	87 95       	ror	r24
     e16:	77 95       	ror	r23
     e18:	67 95       	ror	r22
     e1a:	b7 95       	ror	r27
     e1c:	88 0f       	add	r24, r24
     e1e:	91 1d       	adc	r25, r1
     e20:	96 95       	lsr	r25
     e22:	87 95       	ror	r24
     e24:	97 f9       	bld	r25, 7
     e26:	08 95       	ret

00000e28 <__fp_powsodd>:
     e28:	9f 93       	push	r25
     e2a:	8f 93       	push	r24
     e2c:	7f 93       	push	r23
     e2e:	6f 93       	push	r22
     e30:	ff 93       	push	r31
     e32:	ef 93       	push	r30
     e34:	9b 01       	movw	r18, r22
     e36:	ac 01       	movw	r20, r24
     e38:	0e 94 52 06 	call	0xca4	; 0xca4 <__mulsf3>
     e3c:	ef 91       	pop	r30
     e3e:	ff 91       	pop	r31
     e40:	0e 94 28 07 	call	0xe50	; 0xe50 <__fp_powser>
     e44:	2f 91       	pop	r18
     e46:	3f 91       	pop	r19
     e48:	4f 91       	pop	r20
     e4a:	5f 91       	pop	r21
     e4c:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__mulsf3>

00000e50 <__fp_powser>:
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	1f 93       	push	r17
     e56:	0f 93       	push	r16
     e58:	ff 92       	push	r15
     e5a:	ef 92       	push	r14
     e5c:	df 92       	push	r13
     e5e:	7b 01       	movw	r14, r22
     e60:	8c 01       	movw	r16, r24
     e62:	68 94       	set
     e64:	06 c0       	rjmp	.+12     	; 0xe72 <__fp_powser+0x22>
     e66:	da 2e       	mov	r13, r26
     e68:	ef 01       	movw	r28, r30
     e6a:	0e 94 65 06 	call	0xcca	; 0xcca <__mulsf3x>
     e6e:	fe 01       	movw	r30, r28
     e70:	e8 94       	clt
     e72:	a5 91       	lpm	r26, Z+
     e74:	25 91       	lpm	r18, Z+
     e76:	35 91       	lpm	r19, Z+
     e78:	45 91       	lpm	r20, Z+
     e7a:	55 91       	lpm	r21, Z+
     e7c:	a6 f3       	brts	.-24     	; 0xe66 <__fp_powser+0x16>
     e7e:	ef 01       	movw	r28, r30
     e80:	0e 94 ce 04 	call	0x99c	; 0x99c <__addsf3x>
     e84:	fe 01       	movw	r30, r28
     e86:	97 01       	movw	r18, r14
     e88:	a8 01       	movw	r20, r16
     e8a:	da 94       	dec	r13
     e8c:	69 f7       	brne	.-38     	; 0xe68 <__fp_powser+0x18>
     e8e:	df 90       	pop	r13
     e90:	ef 90       	pop	r14
     e92:	ff 90       	pop	r15
     e94:	0f 91       	pop	r16
     e96:	1f 91       	pop	r17
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <__tablejump2__>:
     e9e:	ee 0f       	add	r30, r30
     ea0:	ff 1f       	adc	r31, r31
     ea2:	05 90       	lpm	r0, Z+
     ea4:	f4 91       	lpm	r31, Z
     ea6:	e0 2d       	mov	r30, r0
     ea8:	09 94       	ijmp

00000eaa <strcat>:
     eaa:	fb 01       	movw	r30, r22
     eac:	dc 01       	movw	r26, r24
     eae:	0d 90       	ld	r0, X+
     eb0:	00 20       	and	r0, r0
     eb2:	e9 f7       	brne	.-6      	; 0xeae <strcat+0x4>
     eb4:	11 97       	sbiw	r26, 0x01	; 1
     eb6:	01 90       	ld	r0, Z+
     eb8:	0d 92       	st	X+, r0
     eba:	00 20       	and	r0, r0
     ebc:	e1 f7       	brne	.-8      	; 0xeb6 <strcat+0xc>
     ebe:	08 95       	ret

00000ec0 <sprintf>:
     ec0:	ae e0       	ldi	r26, 0x0E	; 14
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e6 e6       	ldi	r30, 0x66	; 102
     ec6:	f7 e0       	ldi	r31, 0x07	; 7
     ec8:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <__prologue_saves__+0x1c>
     ecc:	0d 89       	ldd	r16, Y+21	; 0x15
     ece:	1e 89       	ldd	r17, Y+22	; 0x16
     ed0:	86 e0       	ldi	r24, 0x06	; 6
     ed2:	8c 83       	std	Y+4, r24	; 0x04
     ed4:	1a 83       	std	Y+2, r17	; 0x02
     ed6:	09 83       	std	Y+1, r16	; 0x01
     ed8:	8f ef       	ldi	r24, 0xFF	; 255
     eda:	9f e7       	ldi	r25, 0x7F	; 127
     edc:	9e 83       	std	Y+6, r25	; 0x06
     ede:	8d 83       	std	Y+5, r24	; 0x05
     ee0:	ae 01       	movw	r20, r28
     ee2:	47 5e       	subi	r20, 0xE7	; 231
     ee4:	5f 4f       	sbci	r21, 0xFF	; 255
     ee6:	6f 89       	ldd	r22, Y+23	; 0x17
     ee8:	78 8d       	ldd	r23, Y+24	; 0x18
     eea:	ce 01       	movw	r24, r28
     eec:	01 96       	adiw	r24, 0x01	; 1
     eee:	0e 94 82 07 	call	0xf04	; 0xf04 <vfprintf>
     ef2:	ef 81       	ldd	r30, Y+7	; 0x07
     ef4:	f8 85       	ldd	r31, Y+8	; 0x08
     ef6:	e0 0f       	add	r30, r16
     ef8:	f1 1f       	adc	r31, r17
     efa:	10 82       	st	Z, r1
     efc:	2e 96       	adiw	r28, 0x0e	; 14
     efe:	e4 e0       	ldi	r30, 0x04	; 4
     f00:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__epilogue_restores__+0x1c>

00000f04 <vfprintf>:
     f04:	ab e0       	ldi	r26, 0x0B	; 11
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e8 e8       	ldi	r30, 0x88	; 136
     f0a:	f7 e0       	ldi	r31, 0x07	; 7
     f0c:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <__prologue_saves__>
     f10:	6c 01       	movw	r12, r24
     f12:	7b 01       	movw	r14, r22
     f14:	8a 01       	movw	r16, r20
     f16:	fc 01       	movw	r30, r24
     f18:	17 82       	std	Z+7, r1	; 0x07
     f1a:	16 82       	std	Z+6, r1	; 0x06
     f1c:	83 81       	ldd	r24, Z+3	; 0x03
     f1e:	81 ff       	sbrs	r24, 1
     f20:	cc c1       	rjmp	.+920    	; 0x12ba <vfprintf+0x3b6>
     f22:	ce 01       	movw	r24, r28
     f24:	01 96       	adiw	r24, 0x01	; 1
     f26:	3c 01       	movw	r6, r24
     f28:	f6 01       	movw	r30, r12
     f2a:	93 81       	ldd	r25, Z+3	; 0x03
     f2c:	f7 01       	movw	r30, r14
     f2e:	93 fd       	sbrc	r25, 3
     f30:	85 91       	lpm	r24, Z+
     f32:	93 ff       	sbrs	r25, 3
     f34:	81 91       	ld	r24, Z+
     f36:	7f 01       	movw	r14, r30
     f38:	88 23       	and	r24, r24
     f3a:	09 f4       	brne	.+2      	; 0xf3e <vfprintf+0x3a>
     f3c:	ba c1       	rjmp	.+884    	; 0x12b2 <vfprintf+0x3ae>
     f3e:	85 32       	cpi	r24, 0x25	; 37
     f40:	39 f4       	brne	.+14     	; 0xf50 <vfprintf+0x4c>
     f42:	93 fd       	sbrc	r25, 3
     f44:	85 91       	lpm	r24, Z+
     f46:	93 ff       	sbrs	r25, 3
     f48:	81 91       	ld	r24, Z+
     f4a:	7f 01       	movw	r14, r30
     f4c:	85 32       	cpi	r24, 0x25	; 37
     f4e:	29 f4       	brne	.+10     	; 0xf5a <vfprintf+0x56>
     f50:	b6 01       	movw	r22, r12
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 94 79 09 	call	0x12f2	; 0x12f2 <fputc>
     f58:	e7 cf       	rjmp	.-50     	; 0xf28 <vfprintf+0x24>
     f5a:	91 2c       	mov	r9, r1
     f5c:	21 2c       	mov	r2, r1
     f5e:	31 2c       	mov	r3, r1
     f60:	ff e1       	ldi	r31, 0x1F	; 31
     f62:	f3 15       	cp	r31, r3
     f64:	d8 f0       	brcs	.+54     	; 0xf9c <vfprintf+0x98>
     f66:	8b 32       	cpi	r24, 0x2B	; 43
     f68:	79 f0       	breq	.+30     	; 0xf88 <vfprintf+0x84>
     f6a:	38 f4       	brcc	.+14     	; 0xf7a <vfprintf+0x76>
     f6c:	80 32       	cpi	r24, 0x20	; 32
     f6e:	79 f0       	breq	.+30     	; 0xf8e <vfprintf+0x8a>
     f70:	83 32       	cpi	r24, 0x23	; 35
     f72:	a1 f4       	brne	.+40     	; 0xf9c <vfprintf+0x98>
     f74:	23 2d       	mov	r18, r3
     f76:	20 61       	ori	r18, 0x10	; 16
     f78:	1d c0       	rjmp	.+58     	; 0xfb4 <vfprintf+0xb0>
     f7a:	8d 32       	cpi	r24, 0x2D	; 45
     f7c:	61 f0       	breq	.+24     	; 0xf96 <vfprintf+0x92>
     f7e:	80 33       	cpi	r24, 0x30	; 48
     f80:	69 f4       	brne	.+26     	; 0xf9c <vfprintf+0x98>
     f82:	23 2d       	mov	r18, r3
     f84:	21 60       	ori	r18, 0x01	; 1
     f86:	16 c0       	rjmp	.+44     	; 0xfb4 <vfprintf+0xb0>
     f88:	83 2d       	mov	r24, r3
     f8a:	82 60       	ori	r24, 0x02	; 2
     f8c:	38 2e       	mov	r3, r24
     f8e:	e3 2d       	mov	r30, r3
     f90:	e4 60       	ori	r30, 0x04	; 4
     f92:	3e 2e       	mov	r3, r30
     f94:	2a c0       	rjmp	.+84     	; 0xfea <vfprintf+0xe6>
     f96:	f3 2d       	mov	r31, r3
     f98:	f8 60       	ori	r31, 0x08	; 8
     f9a:	1d c0       	rjmp	.+58     	; 0xfd6 <vfprintf+0xd2>
     f9c:	37 fc       	sbrc	r3, 7
     f9e:	2d c0       	rjmp	.+90     	; 0xffa <vfprintf+0xf6>
     fa0:	20 ed       	ldi	r18, 0xD0	; 208
     fa2:	28 0f       	add	r18, r24
     fa4:	2a 30       	cpi	r18, 0x0A	; 10
     fa6:	40 f0       	brcs	.+16     	; 0xfb8 <vfprintf+0xb4>
     fa8:	8e 32       	cpi	r24, 0x2E	; 46
     faa:	b9 f4       	brne	.+46     	; 0xfda <vfprintf+0xd6>
     fac:	36 fc       	sbrc	r3, 6
     fae:	81 c1       	rjmp	.+770    	; 0x12b2 <vfprintf+0x3ae>
     fb0:	23 2d       	mov	r18, r3
     fb2:	20 64       	ori	r18, 0x40	; 64
     fb4:	32 2e       	mov	r3, r18
     fb6:	19 c0       	rjmp	.+50     	; 0xfea <vfprintf+0xe6>
     fb8:	36 fe       	sbrs	r3, 6
     fba:	06 c0       	rjmp	.+12     	; 0xfc8 <vfprintf+0xc4>
     fbc:	8a e0       	ldi	r24, 0x0A	; 10
     fbe:	98 9e       	mul	r9, r24
     fc0:	20 0d       	add	r18, r0
     fc2:	11 24       	eor	r1, r1
     fc4:	92 2e       	mov	r9, r18
     fc6:	11 c0       	rjmp	.+34     	; 0xfea <vfprintf+0xe6>
     fc8:	ea e0       	ldi	r30, 0x0A	; 10
     fca:	2e 9e       	mul	r2, r30
     fcc:	20 0d       	add	r18, r0
     fce:	11 24       	eor	r1, r1
     fd0:	22 2e       	mov	r2, r18
     fd2:	f3 2d       	mov	r31, r3
     fd4:	f0 62       	ori	r31, 0x20	; 32
     fd6:	3f 2e       	mov	r3, r31
     fd8:	08 c0       	rjmp	.+16     	; 0xfea <vfprintf+0xe6>
     fda:	8c 36       	cpi	r24, 0x6C	; 108
     fdc:	21 f4       	brne	.+8      	; 0xfe6 <vfprintf+0xe2>
     fde:	83 2d       	mov	r24, r3
     fe0:	80 68       	ori	r24, 0x80	; 128
     fe2:	38 2e       	mov	r3, r24
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <vfprintf+0xe6>
     fe6:	88 36       	cpi	r24, 0x68	; 104
     fe8:	41 f4       	brne	.+16     	; 0xffa <vfprintf+0xf6>
     fea:	f7 01       	movw	r30, r14
     fec:	93 fd       	sbrc	r25, 3
     fee:	85 91       	lpm	r24, Z+
     ff0:	93 ff       	sbrs	r25, 3
     ff2:	81 91       	ld	r24, Z+
     ff4:	7f 01       	movw	r14, r30
     ff6:	81 11       	cpse	r24, r1
     ff8:	b3 cf       	rjmp	.-154    	; 0xf60 <vfprintf+0x5c>
     ffa:	98 2f       	mov	r25, r24
     ffc:	9f 7d       	andi	r25, 0xDF	; 223
     ffe:	95 54       	subi	r25, 0x45	; 69
    1000:	93 30       	cpi	r25, 0x03	; 3
    1002:	28 f4       	brcc	.+10     	; 0x100e <vfprintf+0x10a>
    1004:	0c 5f       	subi	r16, 0xFC	; 252
    1006:	1f 4f       	sbci	r17, 0xFF	; 255
    1008:	9f e3       	ldi	r25, 0x3F	; 63
    100a:	99 83       	std	Y+1, r25	; 0x01
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <vfprintf+0x124>
    100e:	83 36       	cpi	r24, 0x63	; 99
    1010:	31 f0       	breq	.+12     	; 0x101e <vfprintf+0x11a>
    1012:	83 37       	cpi	r24, 0x73	; 115
    1014:	71 f0       	breq	.+28     	; 0x1032 <vfprintf+0x12e>
    1016:	83 35       	cpi	r24, 0x53	; 83
    1018:	09 f0       	breq	.+2      	; 0x101c <vfprintf+0x118>
    101a:	59 c0       	rjmp	.+178    	; 0x10ce <vfprintf+0x1ca>
    101c:	21 c0       	rjmp	.+66     	; 0x1060 <vfprintf+0x15c>
    101e:	f8 01       	movw	r30, r16
    1020:	80 81       	ld	r24, Z
    1022:	89 83       	std	Y+1, r24	; 0x01
    1024:	0e 5f       	subi	r16, 0xFE	; 254
    1026:	1f 4f       	sbci	r17, 0xFF	; 255
    1028:	88 24       	eor	r8, r8
    102a:	83 94       	inc	r8
    102c:	91 2c       	mov	r9, r1
    102e:	53 01       	movw	r10, r6
    1030:	13 c0       	rjmp	.+38     	; 0x1058 <vfprintf+0x154>
    1032:	28 01       	movw	r4, r16
    1034:	f2 e0       	ldi	r31, 0x02	; 2
    1036:	4f 0e       	add	r4, r31
    1038:	51 1c       	adc	r5, r1
    103a:	f8 01       	movw	r30, r16
    103c:	a0 80       	ld	r10, Z
    103e:	b1 80       	ldd	r11, Z+1	; 0x01
    1040:	36 fe       	sbrs	r3, 6
    1042:	03 c0       	rjmp	.+6      	; 0x104a <vfprintf+0x146>
    1044:	69 2d       	mov	r22, r9
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	02 c0       	rjmp	.+4      	; 0x104e <vfprintf+0x14a>
    104a:	6f ef       	ldi	r22, 0xFF	; 255
    104c:	7f ef       	ldi	r23, 0xFF	; 255
    104e:	c5 01       	movw	r24, r10
    1050:	0e 94 6e 09 	call	0x12dc	; 0x12dc <strnlen>
    1054:	4c 01       	movw	r8, r24
    1056:	82 01       	movw	r16, r4
    1058:	f3 2d       	mov	r31, r3
    105a:	ff 77       	andi	r31, 0x7F	; 127
    105c:	3f 2e       	mov	r3, r31
    105e:	16 c0       	rjmp	.+44     	; 0x108c <vfprintf+0x188>
    1060:	28 01       	movw	r4, r16
    1062:	22 e0       	ldi	r18, 0x02	; 2
    1064:	42 0e       	add	r4, r18
    1066:	51 1c       	adc	r5, r1
    1068:	f8 01       	movw	r30, r16
    106a:	a0 80       	ld	r10, Z
    106c:	b1 80       	ldd	r11, Z+1	; 0x01
    106e:	36 fe       	sbrs	r3, 6
    1070:	03 c0       	rjmp	.+6      	; 0x1078 <vfprintf+0x174>
    1072:	69 2d       	mov	r22, r9
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	02 c0       	rjmp	.+4      	; 0x107c <vfprintf+0x178>
    1078:	6f ef       	ldi	r22, 0xFF	; 255
    107a:	7f ef       	ldi	r23, 0xFF	; 255
    107c:	c5 01       	movw	r24, r10
    107e:	0e 94 63 09 	call	0x12c6	; 0x12c6 <strnlen_P>
    1082:	4c 01       	movw	r8, r24
    1084:	f3 2d       	mov	r31, r3
    1086:	f0 68       	ori	r31, 0x80	; 128
    1088:	3f 2e       	mov	r3, r31
    108a:	82 01       	movw	r16, r4
    108c:	33 fc       	sbrc	r3, 3
    108e:	1b c0       	rjmp	.+54     	; 0x10c6 <vfprintf+0x1c2>
    1090:	82 2d       	mov	r24, r2
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	88 16       	cp	r8, r24
    1096:	99 06       	cpc	r9, r25
    1098:	b0 f4       	brcc	.+44     	; 0x10c6 <vfprintf+0x1c2>
    109a:	b6 01       	movw	r22, r12
    109c:	80 e2       	ldi	r24, 0x20	; 32
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	0e 94 79 09 	call	0x12f2	; 0x12f2 <fputc>
    10a4:	2a 94       	dec	r2
    10a6:	f4 cf       	rjmp	.-24     	; 0x1090 <vfprintf+0x18c>
    10a8:	f5 01       	movw	r30, r10
    10aa:	37 fc       	sbrc	r3, 7
    10ac:	85 91       	lpm	r24, Z+
    10ae:	37 fe       	sbrs	r3, 7
    10b0:	81 91       	ld	r24, Z+
    10b2:	5f 01       	movw	r10, r30
    10b4:	b6 01       	movw	r22, r12
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	0e 94 79 09 	call	0x12f2	; 0x12f2 <fputc>
    10bc:	21 10       	cpse	r2, r1
    10be:	2a 94       	dec	r2
    10c0:	21 e0       	ldi	r18, 0x01	; 1
    10c2:	82 1a       	sub	r8, r18
    10c4:	91 08       	sbc	r9, r1
    10c6:	81 14       	cp	r8, r1
    10c8:	91 04       	cpc	r9, r1
    10ca:	71 f7       	brne	.-36     	; 0x10a8 <vfprintf+0x1a4>
    10cc:	e8 c0       	rjmp	.+464    	; 0x129e <vfprintf+0x39a>
    10ce:	84 36       	cpi	r24, 0x64	; 100
    10d0:	11 f0       	breq	.+4      	; 0x10d6 <vfprintf+0x1d2>
    10d2:	89 36       	cpi	r24, 0x69	; 105
    10d4:	41 f5       	brne	.+80     	; 0x1126 <vfprintf+0x222>
    10d6:	f8 01       	movw	r30, r16
    10d8:	37 fe       	sbrs	r3, 7
    10da:	07 c0       	rjmp	.+14     	; 0x10ea <vfprintf+0x1e6>
    10dc:	60 81       	ld	r22, Z
    10de:	71 81       	ldd	r23, Z+1	; 0x01
    10e0:	82 81       	ldd	r24, Z+2	; 0x02
    10e2:	93 81       	ldd	r25, Z+3	; 0x03
    10e4:	0c 5f       	subi	r16, 0xFC	; 252
    10e6:	1f 4f       	sbci	r17, 0xFF	; 255
    10e8:	08 c0       	rjmp	.+16     	; 0x10fa <vfprintf+0x1f6>
    10ea:	60 81       	ld	r22, Z
    10ec:	71 81       	ldd	r23, Z+1	; 0x01
    10ee:	07 2e       	mov	r0, r23
    10f0:	00 0c       	add	r0, r0
    10f2:	88 0b       	sbc	r24, r24
    10f4:	99 0b       	sbc	r25, r25
    10f6:	0e 5f       	subi	r16, 0xFE	; 254
    10f8:	1f 4f       	sbci	r17, 0xFF	; 255
    10fa:	f3 2d       	mov	r31, r3
    10fc:	ff 76       	andi	r31, 0x6F	; 111
    10fe:	3f 2e       	mov	r3, r31
    1100:	97 ff       	sbrs	r25, 7
    1102:	09 c0       	rjmp	.+18     	; 0x1116 <vfprintf+0x212>
    1104:	90 95       	com	r25
    1106:	80 95       	com	r24
    1108:	70 95       	com	r23
    110a:	61 95       	neg	r22
    110c:	7f 4f       	sbci	r23, 0xFF	; 255
    110e:	8f 4f       	sbci	r24, 0xFF	; 255
    1110:	9f 4f       	sbci	r25, 0xFF	; 255
    1112:	f0 68       	ori	r31, 0x80	; 128
    1114:	3f 2e       	mov	r3, r31
    1116:	2a e0       	ldi	r18, 0x0A	; 10
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	a3 01       	movw	r20, r6
    111c:	0e 94 b5 09 	call	0x136a	; 0x136a <__ultoa_invert>
    1120:	88 2e       	mov	r8, r24
    1122:	86 18       	sub	r8, r6
    1124:	45 c0       	rjmp	.+138    	; 0x11b0 <vfprintf+0x2ac>
    1126:	85 37       	cpi	r24, 0x75	; 117
    1128:	31 f4       	brne	.+12     	; 0x1136 <vfprintf+0x232>
    112a:	23 2d       	mov	r18, r3
    112c:	2f 7e       	andi	r18, 0xEF	; 239
    112e:	b2 2e       	mov	r11, r18
    1130:	2a e0       	ldi	r18, 0x0A	; 10
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	25 c0       	rjmp	.+74     	; 0x1180 <vfprintf+0x27c>
    1136:	93 2d       	mov	r25, r3
    1138:	99 7f       	andi	r25, 0xF9	; 249
    113a:	b9 2e       	mov	r11, r25
    113c:	8f 36       	cpi	r24, 0x6F	; 111
    113e:	c1 f0       	breq	.+48     	; 0x1170 <vfprintf+0x26c>
    1140:	18 f4       	brcc	.+6      	; 0x1148 <vfprintf+0x244>
    1142:	88 35       	cpi	r24, 0x58	; 88
    1144:	79 f0       	breq	.+30     	; 0x1164 <vfprintf+0x260>
    1146:	b5 c0       	rjmp	.+362    	; 0x12b2 <vfprintf+0x3ae>
    1148:	80 37       	cpi	r24, 0x70	; 112
    114a:	19 f0       	breq	.+6      	; 0x1152 <vfprintf+0x24e>
    114c:	88 37       	cpi	r24, 0x78	; 120
    114e:	21 f0       	breq	.+8      	; 0x1158 <vfprintf+0x254>
    1150:	b0 c0       	rjmp	.+352    	; 0x12b2 <vfprintf+0x3ae>
    1152:	e9 2f       	mov	r30, r25
    1154:	e0 61       	ori	r30, 0x10	; 16
    1156:	be 2e       	mov	r11, r30
    1158:	b4 fe       	sbrs	r11, 4
    115a:	0d c0       	rjmp	.+26     	; 0x1176 <vfprintf+0x272>
    115c:	fb 2d       	mov	r31, r11
    115e:	f4 60       	ori	r31, 0x04	; 4
    1160:	bf 2e       	mov	r11, r31
    1162:	09 c0       	rjmp	.+18     	; 0x1176 <vfprintf+0x272>
    1164:	34 fe       	sbrs	r3, 4
    1166:	0a c0       	rjmp	.+20     	; 0x117c <vfprintf+0x278>
    1168:	29 2f       	mov	r18, r25
    116a:	26 60       	ori	r18, 0x06	; 6
    116c:	b2 2e       	mov	r11, r18
    116e:	06 c0       	rjmp	.+12     	; 0x117c <vfprintf+0x278>
    1170:	28 e0       	ldi	r18, 0x08	; 8
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	05 c0       	rjmp	.+10     	; 0x1180 <vfprintf+0x27c>
    1176:	20 e1       	ldi	r18, 0x10	; 16
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <vfprintf+0x27c>
    117c:	20 e1       	ldi	r18, 0x10	; 16
    117e:	32 e0       	ldi	r19, 0x02	; 2
    1180:	f8 01       	movw	r30, r16
    1182:	b7 fe       	sbrs	r11, 7
    1184:	07 c0       	rjmp	.+14     	; 0x1194 <vfprintf+0x290>
    1186:	60 81       	ld	r22, Z
    1188:	71 81       	ldd	r23, Z+1	; 0x01
    118a:	82 81       	ldd	r24, Z+2	; 0x02
    118c:	93 81       	ldd	r25, Z+3	; 0x03
    118e:	0c 5f       	subi	r16, 0xFC	; 252
    1190:	1f 4f       	sbci	r17, 0xFF	; 255
    1192:	06 c0       	rjmp	.+12     	; 0x11a0 <vfprintf+0x29c>
    1194:	60 81       	ld	r22, Z
    1196:	71 81       	ldd	r23, Z+1	; 0x01
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	0e 5f       	subi	r16, 0xFE	; 254
    119e:	1f 4f       	sbci	r17, 0xFF	; 255
    11a0:	a3 01       	movw	r20, r6
    11a2:	0e 94 b5 09 	call	0x136a	; 0x136a <__ultoa_invert>
    11a6:	88 2e       	mov	r8, r24
    11a8:	86 18       	sub	r8, r6
    11aa:	fb 2d       	mov	r31, r11
    11ac:	ff 77       	andi	r31, 0x7F	; 127
    11ae:	3f 2e       	mov	r3, r31
    11b0:	36 fe       	sbrs	r3, 6
    11b2:	0d c0       	rjmp	.+26     	; 0x11ce <vfprintf+0x2ca>
    11b4:	23 2d       	mov	r18, r3
    11b6:	2e 7f       	andi	r18, 0xFE	; 254
    11b8:	a2 2e       	mov	r10, r18
    11ba:	89 14       	cp	r8, r9
    11bc:	58 f4       	brcc	.+22     	; 0x11d4 <vfprintf+0x2d0>
    11be:	34 fe       	sbrs	r3, 4
    11c0:	0b c0       	rjmp	.+22     	; 0x11d8 <vfprintf+0x2d4>
    11c2:	32 fc       	sbrc	r3, 2
    11c4:	09 c0       	rjmp	.+18     	; 0x11d8 <vfprintf+0x2d4>
    11c6:	83 2d       	mov	r24, r3
    11c8:	8e 7e       	andi	r24, 0xEE	; 238
    11ca:	a8 2e       	mov	r10, r24
    11cc:	05 c0       	rjmp	.+10     	; 0x11d8 <vfprintf+0x2d4>
    11ce:	b8 2c       	mov	r11, r8
    11d0:	a3 2c       	mov	r10, r3
    11d2:	03 c0       	rjmp	.+6      	; 0x11da <vfprintf+0x2d6>
    11d4:	b8 2c       	mov	r11, r8
    11d6:	01 c0       	rjmp	.+2      	; 0x11da <vfprintf+0x2d6>
    11d8:	b9 2c       	mov	r11, r9
    11da:	a4 fe       	sbrs	r10, 4
    11dc:	0f c0       	rjmp	.+30     	; 0x11fc <vfprintf+0x2f8>
    11de:	fe 01       	movw	r30, r28
    11e0:	e8 0d       	add	r30, r8
    11e2:	f1 1d       	adc	r31, r1
    11e4:	80 81       	ld	r24, Z
    11e6:	80 33       	cpi	r24, 0x30	; 48
    11e8:	21 f4       	brne	.+8      	; 0x11f2 <vfprintf+0x2ee>
    11ea:	9a 2d       	mov	r25, r10
    11ec:	99 7e       	andi	r25, 0xE9	; 233
    11ee:	a9 2e       	mov	r10, r25
    11f0:	09 c0       	rjmp	.+18     	; 0x1204 <vfprintf+0x300>
    11f2:	a2 fe       	sbrs	r10, 2
    11f4:	06 c0       	rjmp	.+12     	; 0x1202 <vfprintf+0x2fe>
    11f6:	b3 94       	inc	r11
    11f8:	b3 94       	inc	r11
    11fa:	04 c0       	rjmp	.+8      	; 0x1204 <vfprintf+0x300>
    11fc:	8a 2d       	mov	r24, r10
    11fe:	86 78       	andi	r24, 0x86	; 134
    1200:	09 f0       	breq	.+2      	; 0x1204 <vfprintf+0x300>
    1202:	b3 94       	inc	r11
    1204:	a3 fc       	sbrc	r10, 3
    1206:	11 c0       	rjmp	.+34     	; 0x122a <vfprintf+0x326>
    1208:	a0 fe       	sbrs	r10, 0
    120a:	06 c0       	rjmp	.+12     	; 0x1218 <vfprintf+0x314>
    120c:	b2 14       	cp	r11, r2
    120e:	88 f4       	brcc	.+34     	; 0x1232 <vfprintf+0x32e>
    1210:	28 0c       	add	r2, r8
    1212:	92 2c       	mov	r9, r2
    1214:	9b 18       	sub	r9, r11
    1216:	0e c0       	rjmp	.+28     	; 0x1234 <vfprintf+0x330>
    1218:	b2 14       	cp	r11, r2
    121a:	60 f4       	brcc	.+24     	; 0x1234 <vfprintf+0x330>
    121c:	b6 01       	movw	r22, r12
    121e:	80 e2       	ldi	r24, 0x20	; 32
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	0e 94 79 09 	call	0x12f2	; 0x12f2 <fputc>
    1226:	b3 94       	inc	r11
    1228:	f7 cf       	rjmp	.-18     	; 0x1218 <vfprintf+0x314>
    122a:	b2 14       	cp	r11, r2
    122c:	18 f4       	brcc	.+6      	; 0x1234 <vfprintf+0x330>
    122e:	2b 18       	sub	r2, r11
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <vfprintf+0x332>
    1232:	98 2c       	mov	r9, r8
    1234:	21 2c       	mov	r2, r1
    1236:	a4 fe       	sbrs	r10, 4
    1238:	10 c0       	rjmp	.+32     	; 0x125a <vfprintf+0x356>
    123a:	b6 01       	movw	r22, r12
    123c:	80 e3       	ldi	r24, 0x30	; 48
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	0e 94 79 09 	call	0x12f2	; 0x12f2 <fputc>
    1244:	a2 fe       	sbrs	r10, 2
    1246:	17 c0       	rjmp	.+46     	; 0x1276 <vfprintf+0x372>
    1248:	a1 fc       	sbrc	r10, 1
    124a:	03 c0       	rjmp	.+6      	; 0x1252 <vfprintf+0x34e>
    124c:	88 e7       	ldi	r24, 0x78	; 120
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <vfprintf+0x352>
    1252:	88 e5       	ldi	r24, 0x58	; 88
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	b6 01       	movw	r22, r12
    1258:	0c c0       	rjmp	.+24     	; 0x1272 <vfprintf+0x36e>
    125a:	8a 2d       	mov	r24, r10
    125c:	86 78       	andi	r24, 0x86	; 134
    125e:	59 f0       	breq	.+22     	; 0x1276 <vfprintf+0x372>
    1260:	a1 fe       	sbrs	r10, 1
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <vfprintf+0x364>
    1264:	8b e2       	ldi	r24, 0x2B	; 43
    1266:	01 c0       	rjmp	.+2      	; 0x126a <vfprintf+0x366>
    1268:	80 e2       	ldi	r24, 0x20	; 32
    126a:	a7 fc       	sbrc	r10, 7
    126c:	8d e2       	ldi	r24, 0x2D	; 45
    126e:	b6 01       	movw	r22, r12
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	0e 94 79 09 	call	0x12f2	; 0x12f2 <fputc>
    1276:	89 14       	cp	r8, r9
    1278:	38 f4       	brcc	.+14     	; 0x1288 <vfprintf+0x384>
    127a:	b6 01       	movw	r22, r12
    127c:	80 e3       	ldi	r24, 0x30	; 48
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 79 09 	call	0x12f2	; 0x12f2 <fputc>
    1284:	9a 94       	dec	r9
    1286:	f7 cf       	rjmp	.-18     	; 0x1276 <vfprintf+0x372>
    1288:	8a 94       	dec	r8
    128a:	f3 01       	movw	r30, r6
    128c:	e8 0d       	add	r30, r8
    128e:	f1 1d       	adc	r31, r1
    1290:	80 81       	ld	r24, Z
    1292:	b6 01       	movw	r22, r12
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	0e 94 79 09 	call	0x12f2	; 0x12f2 <fputc>
    129a:	81 10       	cpse	r8, r1
    129c:	f5 cf       	rjmp	.-22     	; 0x1288 <vfprintf+0x384>
    129e:	22 20       	and	r2, r2
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <vfprintf+0x3a0>
    12a2:	42 ce       	rjmp	.-892    	; 0xf28 <vfprintf+0x24>
    12a4:	b6 01       	movw	r22, r12
    12a6:	80 e2       	ldi	r24, 0x20	; 32
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	0e 94 79 09 	call	0x12f2	; 0x12f2 <fputc>
    12ae:	2a 94       	dec	r2
    12b0:	f6 cf       	rjmp	.-20     	; 0x129e <vfprintf+0x39a>
    12b2:	f6 01       	movw	r30, r12
    12b4:	86 81       	ldd	r24, Z+6	; 0x06
    12b6:	97 81       	ldd	r25, Z+7	; 0x07
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <vfprintf+0x3ba>
    12ba:	8f ef       	ldi	r24, 0xFF	; 255
    12bc:	9f ef       	ldi	r25, 0xFF	; 255
    12be:	2b 96       	adiw	r28, 0x0b	; 11
    12c0:	e2 e1       	ldi	r30, 0x12	; 18
    12c2:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__epilogue_restores__>

000012c6 <strnlen_P>:
    12c6:	fc 01       	movw	r30, r24
    12c8:	05 90       	lpm	r0, Z+
    12ca:	61 50       	subi	r22, 0x01	; 1
    12cc:	70 40       	sbci	r23, 0x00	; 0
    12ce:	01 10       	cpse	r0, r1
    12d0:	d8 f7       	brcc	.-10     	; 0x12c8 <strnlen_P+0x2>
    12d2:	80 95       	com	r24
    12d4:	90 95       	com	r25
    12d6:	8e 0f       	add	r24, r30
    12d8:	9f 1f       	adc	r25, r31
    12da:	08 95       	ret

000012dc <strnlen>:
    12dc:	fc 01       	movw	r30, r24
    12de:	61 50       	subi	r22, 0x01	; 1
    12e0:	70 40       	sbci	r23, 0x00	; 0
    12e2:	01 90       	ld	r0, Z+
    12e4:	01 10       	cpse	r0, r1
    12e6:	d8 f7       	brcc	.-10     	; 0x12de <strnlen+0x2>
    12e8:	80 95       	com	r24
    12ea:	90 95       	com	r25
    12ec:	8e 0f       	add	r24, r30
    12ee:	9f 1f       	adc	r25, r31
    12f0:	08 95       	ret

000012f2 <fputc>:
    12f2:	0f 93       	push	r16
    12f4:	1f 93       	push	r17
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	fb 01       	movw	r30, r22
    12fc:	23 81       	ldd	r18, Z+3	; 0x03
    12fe:	21 fd       	sbrc	r18, 1
    1300:	03 c0       	rjmp	.+6      	; 0x1308 <fputc+0x16>
    1302:	8f ef       	ldi	r24, 0xFF	; 255
    1304:	9f ef       	ldi	r25, 0xFF	; 255
    1306:	2c c0       	rjmp	.+88     	; 0x1360 <fputc+0x6e>
    1308:	22 ff       	sbrs	r18, 2
    130a:	16 c0       	rjmp	.+44     	; 0x1338 <fputc+0x46>
    130c:	46 81       	ldd	r20, Z+6	; 0x06
    130e:	57 81       	ldd	r21, Z+7	; 0x07
    1310:	24 81       	ldd	r18, Z+4	; 0x04
    1312:	35 81       	ldd	r19, Z+5	; 0x05
    1314:	42 17       	cp	r20, r18
    1316:	53 07       	cpc	r21, r19
    1318:	44 f4       	brge	.+16     	; 0x132a <fputc+0x38>
    131a:	a0 81       	ld	r26, Z
    131c:	b1 81       	ldd	r27, Z+1	; 0x01
    131e:	9d 01       	movw	r18, r26
    1320:	2f 5f       	subi	r18, 0xFF	; 255
    1322:	3f 4f       	sbci	r19, 0xFF	; 255
    1324:	31 83       	std	Z+1, r19	; 0x01
    1326:	20 83       	st	Z, r18
    1328:	8c 93       	st	X, r24
    132a:	26 81       	ldd	r18, Z+6	; 0x06
    132c:	37 81       	ldd	r19, Z+7	; 0x07
    132e:	2f 5f       	subi	r18, 0xFF	; 255
    1330:	3f 4f       	sbci	r19, 0xFF	; 255
    1332:	37 83       	std	Z+7, r19	; 0x07
    1334:	26 83       	std	Z+6, r18	; 0x06
    1336:	14 c0       	rjmp	.+40     	; 0x1360 <fputc+0x6e>
    1338:	8b 01       	movw	r16, r22
    133a:	ec 01       	movw	r28, r24
    133c:	fb 01       	movw	r30, r22
    133e:	00 84       	ldd	r0, Z+8	; 0x08
    1340:	f1 85       	ldd	r31, Z+9	; 0x09
    1342:	e0 2d       	mov	r30, r0
    1344:	09 95       	icall
    1346:	89 2b       	or	r24, r25
    1348:	e1 f6       	brne	.-72     	; 0x1302 <fputc+0x10>
    134a:	d8 01       	movw	r26, r16
    134c:	16 96       	adiw	r26, 0x06	; 6
    134e:	8d 91       	ld	r24, X+
    1350:	9c 91       	ld	r25, X
    1352:	17 97       	sbiw	r26, 0x07	; 7
    1354:	01 96       	adiw	r24, 0x01	; 1
    1356:	17 96       	adiw	r26, 0x07	; 7
    1358:	9c 93       	st	X, r25
    135a:	8e 93       	st	-X, r24
    135c:	16 97       	sbiw	r26, 0x06	; 6
    135e:	ce 01       	movw	r24, r28
    1360:	df 91       	pop	r29
    1362:	cf 91       	pop	r28
    1364:	1f 91       	pop	r17
    1366:	0f 91       	pop	r16
    1368:	08 95       	ret

0000136a <__ultoa_invert>:
    136a:	fa 01       	movw	r30, r20
    136c:	aa 27       	eor	r26, r26
    136e:	28 30       	cpi	r18, 0x08	; 8
    1370:	51 f1       	breq	.+84     	; 0x13c6 <__ultoa_invert+0x5c>
    1372:	20 31       	cpi	r18, 0x10	; 16
    1374:	81 f1       	breq	.+96     	; 0x13d6 <__ultoa_invert+0x6c>
    1376:	e8 94       	clt
    1378:	6f 93       	push	r22
    137a:	6e 7f       	andi	r22, 0xFE	; 254
    137c:	6e 5f       	subi	r22, 0xFE	; 254
    137e:	7f 4f       	sbci	r23, 0xFF	; 255
    1380:	8f 4f       	sbci	r24, 0xFF	; 255
    1382:	9f 4f       	sbci	r25, 0xFF	; 255
    1384:	af 4f       	sbci	r26, 0xFF	; 255
    1386:	b1 e0       	ldi	r27, 0x01	; 1
    1388:	3e d0       	rcall	.+124    	; 0x1406 <__ultoa_invert+0x9c>
    138a:	b4 e0       	ldi	r27, 0x04	; 4
    138c:	3c d0       	rcall	.+120    	; 0x1406 <__ultoa_invert+0x9c>
    138e:	67 0f       	add	r22, r23
    1390:	78 1f       	adc	r23, r24
    1392:	89 1f       	adc	r24, r25
    1394:	9a 1f       	adc	r25, r26
    1396:	a1 1d       	adc	r26, r1
    1398:	68 0f       	add	r22, r24
    139a:	79 1f       	adc	r23, r25
    139c:	8a 1f       	adc	r24, r26
    139e:	91 1d       	adc	r25, r1
    13a0:	a1 1d       	adc	r26, r1
    13a2:	6a 0f       	add	r22, r26
    13a4:	71 1d       	adc	r23, r1
    13a6:	81 1d       	adc	r24, r1
    13a8:	91 1d       	adc	r25, r1
    13aa:	a1 1d       	adc	r26, r1
    13ac:	20 d0       	rcall	.+64     	; 0x13ee <__ultoa_invert+0x84>
    13ae:	09 f4       	brne	.+2      	; 0x13b2 <__ultoa_invert+0x48>
    13b0:	68 94       	set
    13b2:	3f 91       	pop	r19
    13b4:	2a e0       	ldi	r18, 0x0A	; 10
    13b6:	26 9f       	mul	r18, r22
    13b8:	11 24       	eor	r1, r1
    13ba:	30 19       	sub	r19, r0
    13bc:	30 5d       	subi	r19, 0xD0	; 208
    13be:	31 93       	st	Z+, r19
    13c0:	de f6       	brtc	.-74     	; 0x1378 <__ultoa_invert+0xe>
    13c2:	cf 01       	movw	r24, r30
    13c4:	08 95       	ret
    13c6:	46 2f       	mov	r20, r22
    13c8:	47 70       	andi	r20, 0x07	; 7
    13ca:	40 5d       	subi	r20, 0xD0	; 208
    13cc:	41 93       	st	Z+, r20
    13ce:	b3 e0       	ldi	r27, 0x03	; 3
    13d0:	0f d0       	rcall	.+30     	; 0x13f0 <__ultoa_invert+0x86>
    13d2:	c9 f7       	brne	.-14     	; 0x13c6 <__ultoa_invert+0x5c>
    13d4:	f6 cf       	rjmp	.-20     	; 0x13c2 <__ultoa_invert+0x58>
    13d6:	46 2f       	mov	r20, r22
    13d8:	4f 70       	andi	r20, 0x0F	; 15
    13da:	40 5d       	subi	r20, 0xD0	; 208
    13dc:	4a 33       	cpi	r20, 0x3A	; 58
    13de:	18 f0       	brcs	.+6      	; 0x13e6 <__ultoa_invert+0x7c>
    13e0:	49 5d       	subi	r20, 0xD9	; 217
    13e2:	31 fd       	sbrc	r19, 1
    13e4:	40 52       	subi	r20, 0x20	; 32
    13e6:	41 93       	st	Z+, r20
    13e8:	02 d0       	rcall	.+4      	; 0x13ee <__ultoa_invert+0x84>
    13ea:	a9 f7       	brne	.-22     	; 0x13d6 <__ultoa_invert+0x6c>
    13ec:	ea cf       	rjmp	.-44     	; 0x13c2 <__ultoa_invert+0x58>
    13ee:	b4 e0       	ldi	r27, 0x04	; 4
    13f0:	a6 95       	lsr	r26
    13f2:	97 95       	ror	r25
    13f4:	87 95       	ror	r24
    13f6:	77 95       	ror	r23
    13f8:	67 95       	ror	r22
    13fa:	ba 95       	dec	r27
    13fc:	c9 f7       	brne	.-14     	; 0x13f0 <__ultoa_invert+0x86>
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	61 05       	cpc	r22, r1
    1402:	71 05       	cpc	r23, r1
    1404:	08 95       	ret
    1406:	9b 01       	movw	r18, r22
    1408:	ac 01       	movw	r20, r24
    140a:	0a 2e       	mov	r0, r26
    140c:	06 94       	lsr	r0
    140e:	57 95       	ror	r21
    1410:	47 95       	ror	r20
    1412:	37 95       	ror	r19
    1414:	27 95       	ror	r18
    1416:	ba 95       	dec	r27
    1418:	c9 f7       	brne	.-14     	; 0x140c <__ultoa_invert+0xa2>
    141a:	62 0f       	add	r22, r18
    141c:	73 1f       	adc	r23, r19
    141e:	84 1f       	adc	r24, r20
    1420:	95 1f       	adc	r25, r21
    1422:	a0 1d       	adc	r26, r0
    1424:	08 95       	ret

00001426 <eeprom_read_block>:
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22

0000142a <eeprom_read_blraw>:
    142a:	fc 01       	movw	r30, r24
    142c:	e1 99       	sbic	0x1c, 1	; 28
    142e:	fe cf       	rjmp	.-4      	; 0x142c <eeprom_read_blraw+0x2>
    1430:	06 c0       	rjmp	.+12     	; 0x143e <eeprom_read_blraw+0x14>
    1432:	ff bb       	out	0x1f, r31	; 31
    1434:	ee bb       	out	0x1e, r30	; 30
    1436:	e0 9a       	sbi	0x1c, 0	; 28
    1438:	31 96       	adiw	r30, 0x01	; 1
    143a:	0d b2       	in	r0, 0x1d	; 29
    143c:	0d 92       	st	X+, r0
    143e:	41 50       	subi	r20, 0x01	; 1
    1440:	50 40       	sbci	r21, 0x00	; 0
    1442:	b8 f7       	brcc	.-18     	; 0x1432 <eeprom_read_blraw+0x8>
    1444:	08 95       	ret

00001446 <eeprom_write_block>:
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	03 c0       	rjmp	.+6      	; 0x1452 <eeprom_write_block+0xc>
    144c:	2d 91       	ld	r18, X+
    144e:	0e 94 2e 0a 	call	0x145c	; 0x145c <eeprom_write_r18>
    1452:	41 50       	subi	r20, 0x01	; 1
    1454:	50 40       	sbci	r21, 0x00	; 0
    1456:	d0 f7       	brcc	.-12     	; 0x144c <eeprom_write_block+0x6>
    1458:	08 95       	ret

0000145a <eeprom_write_byte>:
    145a:	26 2f       	mov	r18, r22

0000145c <eeprom_write_r18>:
    145c:	e1 99       	sbic	0x1c, 1	; 28
    145e:	fe cf       	rjmp	.-4      	; 0x145c <eeprom_write_r18>
    1460:	9f bb       	out	0x1f, r25	; 31
    1462:	8e bb       	out	0x1e, r24	; 30
    1464:	2d bb       	out	0x1d, r18	; 29
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	e2 9a       	sbi	0x1c, 2	; 28
    146c:	e1 9a       	sbi	0x1c, 1	; 28
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	01 96       	adiw	r24, 0x01	; 1
    1472:	08 95       	ret

00001474 <__prologue_saves__>:
    1474:	2f 92       	push	r2
    1476:	3f 92       	push	r3
    1478:	4f 92       	push	r4
    147a:	5f 92       	push	r5
    147c:	6f 92       	push	r6
    147e:	7f 92       	push	r7
    1480:	8f 92       	push	r8
    1482:	9f 92       	push	r9
    1484:	af 92       	push	r10
    1486:	bf 92       	push	r11
    1488:	cf 92       	push	r12
    148a:	df 92       	push	r13
    148c:	ef 92       	push	r14
    148e:	ff 92       	push	r15
    1490:	0f 93       	push	r16
    1492:	1f 93       	push	r17
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	ca 1b       	sub	r28, r26
    149e:	db 0b       	sbc	r29, r27
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	09 94       	ijmp

000014ac <__epilogue_restores__>:
    14ac:	2a 88       	ldd	r2, Y+18	; 0x12
    14ae:	39 88       	ldd	r3, Y+17	; 0x11
    14b0:	48 88       	ldd	r4, Y+16	; 0x10
    14b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    14b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    14b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    14b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    14ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    14bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    14be:	b9 84       	ldd	r11, Y+9	; 0x09
    14c0:	c8 84       	ldd	r12, Y+8	; 0x08
    14c2:	df 80       	ldd	r13, Y+7	; 0x07
    14c4:	ee 80       	ldd	r14, Y+6	; 0x06
    14c6:	fd 80       	ldd	r15, Y+5	; 0x05
    14c8:	0c 81       	ldd	r16, Y+4	; 0x04
    14ca:	1b 81       	ldd	r17, Y+3	; 0x03
    14cc:	aa 81       	ldd	r26, Y+2	; 0x02
    14ce:	b9 81       	ldd	r27, Y+1	; 0x01
    14d0:	ce 0f       	add	r28, r30
    14d2:	d1 1d       	adc	r29, r1
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61
    14de:	ed 01       	movw	r28, r26
    14e0:	08 95       	ret

000014e2 <_exit>:
    14e2:	f8 94       	cli

000014e4 <__stop_program>:
    14e4:	ff cf       	rjmp	.-2      	; 0x14e4 <__stop_program>
