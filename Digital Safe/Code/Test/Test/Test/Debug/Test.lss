
Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000074  00800060  00000b4e  00000be2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000d4  008000d4  00000c56  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fa7  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e1  00000000  00000000  00001d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000070f  00000000  00000000  000023f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00002b00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043e  00000000  00000000  00002c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000086f  00000000  00000000  0000309e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000390d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__vector_1>
   8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
   c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	e7 01       	movw	r28, r14
  56:	ed 01       	movw	r28, r26
  58:	f3 01       	movw	r30, r6
  5a:	f9 01       	movw	r30, r18
  5c:	ff 01       	movw	r30, r30
  5e:	05 02       	muls	r16, r21
  60:	0b 02       	muls	r16, r27
  62:	11 02       	muls	r17, r17
  64:	15 02       	muls	r17, r21
  66:	1b 02       	muls	r17, r27
  68:	21 02       	muls	r18, r17
  6a:	27 02       	muls	r18, r23
  6c:	2d 02       	muls	r18, r29
  6e:	3f 02       	muls	r19, r31
  70:	45 02       	muls	r20, r21
  72:	49 02       	muls	r20, r25

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	10 e0       	ldi	r17, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	ee e4       	ldi	r30, 0x4E	; 78
  88:	fb e0       	ldi	r31, 0x0B	; 11
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a4 3d       	cpi	r26, 0xD4	; 212
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	a4 ed       	ldi	r26, 0xD4	; 212
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a9 3d       	cpi	r26, 0xD9	; 217
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <main>
  aa:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <LCD_Cmd>:
	AinLow = (int)ADCL;		/* Read lower byte*/
	Ain = (int)ADCH*256;		/* Read higher 2 bits and 
					Multiply with weight */
	Ain = Ain + AinLow;				
	return(Ain);			/* Return digital value*/
}
  b2:	95 b3       	in	r25, 0x15	; 21
  b4:	9f 70       	andi	r25, 0x0F	; 15
  b6:	28 2f       	mov	r18, r24
  b8:	20 7f       	andi	r18, 0xF0	; 240
  ba:	92 2b       	or	r25, r18
  bc:	95 bb       	out	0x15, r25	; 21
  be:	95 b3       	in	r25, 0x15	; 21
  c0:	9e 7f       	andi	r25, 0xFE	; 254
  c2:	95 bb       	out	0x15, r25	; 21
  c4:	95 b3       	in	r25, 0x15	; 21
  c6:	92 60       	ori	r25, 0x02	; 2
  c8:	95 bb       	out	0x15, r25	; 21
  ca:	32 e0       	ldi	r19, 0x02	; 2
  cc:	3a 95       	dec	r19
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_Cmd+0x1a>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCD_Cmd+0x20>
  d2:	95 b3       	in	r25, 0x15	; 21
  d4:	9d 7f       	andi	r25, 0xFD	; 253
  d6:	95 bb       	out	0x15, r25	; 21
  d8:	ef e8       	ldi	r30, 0x8F	; 143
  da:	f1 e0       	ldi	r31, 0x01	; 1
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_Cmd+0x2a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <LCD_Cmd+0x30>
  e2:	00 00       	nop
  e4:	25 b3       	in	r18, 0x15	; 21
  e6:	f0 e1       	ldi	r31, 0x10	; 16
  e8:	8f 9f       	mul	r24, r31
  ea:	c0 01       	movw	r24, r0
  ec:	11 24       	eor	r1, r1
  ee:	92 2f       	mov	r25, r18
  f0:	9f 70       	andi	r25, 0x0F	; 15
  f2:	89 2b       	or	r24, r25
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	85 b3       	in	r24, 0x15	; 21
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	85 bb       	out	0x15, r24	; 21
  fc:	32 e0       	ldi	r19, 0x02	; 2
  fe:	3a 95       	dec	r19
 100:	f1 f7       	brne	.-4      	; 0xfe <LCD_Cmd+0x4c>
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCD_Cmd+0x52>
 104:	85 b3       	in	r24, 0x15	; 21
 106:	8d 7f       	andi	r24, 0xFD	; 253
 108:	85 bb       	out	0x15, r24	; 21
 10a:	8f e9       	ldi	r24, 0x9F	; 159
 10c:	9f e0       	ldi	r25, 0x0F	; 15
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <LCD_Cmd+0x5c>
 112:	00 c0       	rjmp	.+0      	; 0x114 <LCD_Cmd+0x62>
 114:	00 00       	nop
 116:	08 95       	ret

00000118 <LCD_Char>:
 118:	95 b3       	in	r25, 0x15	; 21
 11a:	9f 70       	andi	r25, 0x0F	; 15
 11c:	28 2f       	mov	r18, r24
 11e:	20 7f       	andi	r18, 0xF0	; 240
 120:	92 2b       	or	r25, r18
 122:	95 bb       	out	0x15, r25	; 21
 124:	95 b3       	in	r25, 0x15	; 21
 126:	91 60       	ori	r25, 0x01	; 1
 128:	95 bb       	out	0x15, r25	; 21
 12a:	95 b3       	in	r25, 0x15	; 21
 12c:	92 60       	ori	r25, 0x02	; 2
 12e:	95 bb       	out	0x15, r25	; 21
 130:	32 e0       	ldi	r19, 0x02	; 2
 132:	3a 95       	dec	r19
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_Char+0x1a>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_Char+0x20>
 138:	95 b3       	in	r25, 0x15	; 21
 13a:	9d 7f       	andi	r25, 0xFD	; 253
 13c:	95 bb       	out	0x15, r25	; 21
 13e:	ef e8       	ldi	r30, 0x8F	; 143
 140:	f1 e0       	ldi	r31, 0x01	; 1
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <LCD_Char+0x2a>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCD_Char+0x30>
 148:	00 00       	nop
 14a:	25 b3       	in	r18, 0x15	; 21
 14c:	f0 e1       	ldi	r31, 0x10	; 16
 14e:	8f 9f       	mul	r24, r31
 150:	c0 01       	movw	r24, r0
 152:	11 24       	eor	r1, r1
 154:	92 2f       	mov	r25, r18
 156:	9f 70       	andi	r25, 0x0F	; 15
 158:	89 2b       	or	r24, r25
 15a:	85 bb       	out	0x15, r24	; 21
 15c:	85 b3       	in	r24, 0x15	; 21
 15e:	82 60       	ori	r24, 0x02	; 2
 160:	85 bb       	out	0x15, r24	; 21
 162:	32 e0       	ldi	r19, 0x02	; 2
 164:	3a 95       	dec	r19
 166:	f1 f7       	brne	.-4      	; 0x164 <LCD_Char+0x4c>
 168:	00 c0       	rjmp	.+0      	; 0x16a <LCD_Char+0x52>
 16a:	85 b3       	in	r24, 0x15	; 21
 16c:	8d 7f       	andi	r24, 0xFD	; 253
 16e:	85 bb       	out	0x15, r24	; 21
 170:	8f e9       	ldi	r24, 0x9F	; 159
 172:	9f e0       	ldi	r25, 0x0F	; 15
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <LCD_Char+0x5c>
 178:	00 c0       	rjmp	.+0      	; 0x17a <LCD_Char+0x62>
 17a:	00 00       	nop
 17c:	08 95       	ret

0000017e <LCD_Init>:
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	84 bb       	out	0x14, r24	; 20
 182:	8f e3       	ldi	r24, 0x3F	; 63
 184:	9c e9       	ldi	r25, 0x9C	; 156
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_Init+0x8>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_Init+0xe>
 18c:	00 00       	nop
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Cmd>
 194:	88 e2       	ldi	r24, 0x28	; 40
 196:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Cmd>
 19a:	8c e0       	ldi	r24, 0x0C	; 12
 19c:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Cmd>
 1a0:	86 e0       	ldi	r24, 0x06	; 6
 1a2:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Cmd>
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Cmd>
 1ac:	08 95       	ret

000001ae <LCD_Clear>:
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Cmd>
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Cmd>
 1ba:	08 95       	ret

000001bc <LCD_String>:
 1bc:	0f 93       	push	r16
 1be:	1f 93       	push	r17
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	8c 01       	movw	r16, r24
 1c6:	c0 e0       	ldi	r28, 0x00	; 0
 1c8:	d0 e0       	ldi	r29, 0x00	; 0
 1ca:	03 c0       	rjmp	.+6      	; 0x1d2 <LCD_String+0x16>
 1cc:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_Char>
 1d0:	21 96       	adiw	r28, 0x01	; 1
 1d2:	f8 01       	movw	r30, r16
 1d4:	ec 0f       	add	r30, r28
 1d6:	fd 1f       	adc	r31, r29
 1d8:	80 81       	ld	r24, Z
 1da:	81 11       	cpse	r24, r1
 1dc:	f7 cf       	rjmp	.-18     	; 0x1cc <LCD_String+0x10>
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	08 95       	ret

000001e8 <main>:



int main(void)
{	
	LCD_Init();
 1e8:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_Init>
	LCD_String("Enter Password: ");
 1ec:	88 e9       	ldi	r24, 0x98	; 152
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_String>
	LCD_Cmd(0xC0);
 1f4:	80 ec       	ldi	r24, 0xC0	; 192
 1f6:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Cmd>
	
	/* Interrupt setup */
	GICR = 1<<INT0; /* Enable INT0*/
 1fa:	80 e4       	ldi	r24, 0x40	; 64
 1fc:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1<<ISC01 | 1<<ISC00; /* Trigger INT0 on rising edge */
 1fe:	83 e0       	ldi	r24, 0x03	; 3
 200:	85 bf       	out	0x35, r24	; 53
	sei(); /* Enable Global Interrupt */
 202:	78 94       	sei
 204:	ff cf       	rjmp	.-2      	; 0x204 <main+0x1c>

00000206 <check_password>:
	return data;
}

// Checking password
void check_password(void)
{
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
	int i;
	for (i = 0; i < 4; i++)
 20a:	c0 e0       	ldi	r28, 0x00	; 0
 20c:	d0 e0       	ldi	r29, 0x00	; 0
 20e:	30 c0       	rjmp	.+96     	; 0x270 <check_password+0x6a>
	{
		if (input_password[i] != stored_password[i])
 210:	ce 01       	movw	r24, r28
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	fc 01       	movw	r30, r24
 218:	e8 59       	subi	r30, 0x98	; 152
 21a:	ff 4f       	sbci	r31, 0xFF	; 255
 21c:	20 81       	ld	r18, Z
 21e:	31 81       	ldd	r19, Z+1	; 0x01
 220:	fc 01       	movw	r30, r24
 222:	e0 5a       	subi	r30, 0xA0	; 160
 224:	ff 4f       	sbci	r31, 0xFF	; 255
 226:	80 81       	ld	r24, Z
 228:	91 81       	ldd	r25, Z+1	; 0x01
 22a:	28 17       	cp	r18, r24
 22c:	39 07       	cpc	r19, r25
 22e:	f9 f0       	breq	.+62     	; 0x26e <check_password+0x68>
		{
			LCD_Cmd(0x01);
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Cmd>
			LCD_String("Wrong Password");
 236:	89 ea       	ldi	r24, 0xA9	; 169
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23e:	2f ef       	ldi	r18, 0xFF	; 255
 240:	89 e6       	ldi	r24, 0x69	; 105
 242:	98 e1       	ldi	r25, 0x18	; 24
 244:	21 50       	subi	r18, 0x01	; 1
 246:	80 40       	sbci	r24, 0x00	; 0
 248:	90 40       	sbci	r25, 0x00	; 0
 24a:	e1 f7       	brne	.-8      	; 0x244 <check_password+0x3e>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <check_password+0x48>
 24e:	00 00       	nop
			_delay_ms(1000);
			LCD_Cmd(0x01);
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Cmd>
			LCD_String("Enter Password: ");
 256:	88 e9       	ldi	r24, 0x98	; 152
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_String>
			LCD_Cmd(0xC0);
 25e:	80 ec       	ldi	r24, 0xC0	; 192
 260:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Cmd>
			count = 0;
 264:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <count+0x1>
 268:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <count>
			break;
 26c:	04 c0       	rjmp	.+8      	; 0x276 <check_password+0x70>

// Checking password
void check_password(void)
{
	int i;
	for (i = 0; i < 4; i++)
 26e:	21 96       	adiw	r28, 0x01	; 1
 270:	c4 30       	cpi	r28, 0x04	; 4
 272:	d1 05       	cpc	r29, r1
 274:	6c f2       	brlt	.-102    	; 0x210 <check_password+0xa>
			LCD_Cmd(0xC0);
			count = 0;
			break;
		}
	}
	if (i == 4)
 276:	24 97       	sbiw	r28, 0x04	; 4
 278:	f1 f4       	brne	.+60     	; 0x2b6 <check_password+0xb0>
	{
		LCD_Cmd(0x01);
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Cmd>
		LCD_String("Correct Password");
 280:	88 eb       	ldi	r24, 0xB8	; 184
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_String>
 288:	2f ef       	ldi	r18, 0xFF	; 255
 28a:	89 e6       	ldi	r24, 0x69	; 105
 28c:	98 e1       	ldi	r25, 0x18	; 24
 28e:	21 50       	subi	r18, 0x01	; 1
 290:	80 40       	sbci	r24, 0x00	; 0
 292:	90 40       	sbci	r25, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <check_password+0x88>
 296:	00 c0       	rjmp	.+0      	; 0x298 <check_password+0x92>
 298:	00 00       	nop
		_delay_ms(1000);
		LCD_Cmd(0x01);
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Cmd>
		LCD_String("Enter Password: ");
 2a0:	88 e9       	ldi	r24, 0x98	; 152
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_String>
		LCD_Cmd(0xC0);
 2a8:	80 ec       	ldi	r24, 0xC0	; 192
 2aa:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Cmd>
		count = 0;
 2ae:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <count+0x1>
 2b2:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <count>
	}
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <show_password>:

// Showing password
// Function to show the entered password
void show_password(void){
 2bc:	ef 92       	push	r14
 2be:	ff 92       	push	r15
 2c0:	0f 93       	push	r16
 2c2:	1f 93       	push	r17
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
 2cc:	e2 97       	sbiw	r28, 0x32	; 50
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	f8 94       	cli
 2d2:	de bf       	out	0x3e, r29	; 62
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	cd bf       	out	0x3d, r28	; 61
	char buffer[40] = "\0";
 2d8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <input_password+0x8>
 2dc:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <input_password+0x9>
 2e0:	9a 83       	std	Y+2, r25	; 0x02
 2e2:	89 83       	std	Y+1, r24	; 0x01
 2e4:	fe 01       	movw	r30, r28
 2e6:	33 96       	adiw	r30, 0x03	; 3
 2e8:	86 e2       	ldi	r24, 0x26	; 38
 2ea:	df 01       	movw	r26, r30
 2ec:	1d 92       	st	X+, r1
 2ee:	8a 95       	dec	r24
 2f0:	e9 f7       	brne	.-6      	; 0x2ec <show_password+0x30>
	char str[10];

	LCD_Clear();
 2f2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_Clear>
	LCD_String("Enter Password: ");
 2f6:	88 e9       	ldi	r24, 0x98	; 152
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_String>
	LCD_Cmd(0xC0);
 2fe:	80 ec       	ldi	r24, 0xC0	; 192
 300:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Cmd>

	for (int i = 0; i < 4; i++){
 304:	00 e0       	ldi	r16, 0x00	; 0
 306:	10 e0       	ldi	r17, 0x00	; 0
 308:	26 c0       	rjmp	.+76     	; 0x356 <show_password+0x9a>
		if (input_password[i] != -1){
 30a:	f8 01       	movw	r30, r16
 30c:	ee 0f       	add	r30, r30
 30e:	ff 1f       	adc	r31, r31
 310:	e8 59       	subi	r30, 0x98	; 152
 312:	ff 4f       	sbci	r31, 0xFF	; 255
 314:	80 81       	ld	r24, Z
 316:	91 81       	ldd	r25, Z+1	; 0x01
 318:	8f 3f       	cpi	r24, 0xFF	; 255
 31a:	bf ef       	ldi	r27, 0xFF	; 255
 31c:	9b 07       	cpc	r25, r27
 31e:	c9 f0       	breq	.+50     	; 0x352 <show_password+0x96>
			sprintf(str, "%d", input_password[i]);
 320:	9f 93       	push	r25
 322:	8f 93       	push	r24
 324:	89 ec       	ldi	r24, 0xC9	; 201
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	9f 93       	push	r25
 32a:	8f 93       	push	r24
 32c:	7e 01       	movw	r14, r28
 32e:	e9 e2       	ldi	r30, 0x29	; 41
 330:	ee 0e       	add	r14, r30
 332:	f1 1c       	adc	r15, r1
 334:	ff 92       	push	r15
 336:	ef 92       	push	r14
 338:	0e 94 bb 02 	call	0x576	; 0x576 <sprintf>
			strcat(buffer, str);
 33c:	b7 01       	movw	r22, r14
 33e:	ce 01       	movw	r24, r28
 340:	01 96       	adiw	r24, 0x01	; 1
 342:	0e 94 b0 02 	call	0x560	; 0x560 <strcat>
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	0f 90       	pop	r0
 34e:	0f 90       	pop	r0
 350:	0f 90       	pop	r0

	LCD_Clear();
	LCD_String("Enter Password: ");
	LCD_Cmd(0xC0);

	for (int i = 0; i < 4; i++){
 352:	0f 5f       	subi	r16, 0xFF	; 255
 354:	1f 4f       	sbci	r17, 0xFF	; 255
 356:	04 30       	cpi	r16, 0x04	; 4
 358:	11 05       	cpc	r17, r1
 35a:	bc f2       	brlt	.-82     	; 0x30a <show_password+0x4e>
			sprintf(str, "%d", input_password[i]);
			strcat(buffer, str);
		}
	}

	LCD_String(buffer);
 35c:	8e 01       	movw	r16, r28
 35e:	0f 5f       	subi	r16, 0xFF	; 255
 360:	1f 4f       	sbci	r17, 0xFF	; 255
 362:	c8 01       	movw	r24, r16
 364:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_String>

	memset(input_password, -1, sizeof(input_password)); // reset to -1
 368:	48 e0       	ldi	r20, 0x08	; 8
 36a:	50 e0       	ldi	r21, 0x00	; 0
 36c:	6f ef       	ldi	r22, 0xFF	; 255
 36e:	7f ef       	ldi	r23, 0xFF	; 255
 370:	88 e6       	ldi	r24, 0x68	; 104
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 a9 02 	call	0x552	; 0x552 <memset>
	memset(str, 0, sizeof(str));
 378:	fe 01       	movw	r30, r28
 37a:	b9 96       	adiw	r30, 0x29	; 41
 37c:	8a e0       	ldi	r24, 0x0A	; 10
 37e:	df 01       	movw	r26, r30
 380:	1d 92       	st	X+, r1
 382:	8a 95       	dec	r24
 384:	e9 f7       	brne	.-6      	; 0x380 <show_password+0xc4>
	memset(buffer, 0, sizeof(buffer));
 386:	88 e2       	ldi	r24, 0x28	; 40
 388:	f8 01       	movw	r30, r16
 38a:	11 92       	st	Z+, r1
 38c:	8a 95       	dec	r24
 38e:	e9 f7       	brne	.-6      	; 0x38a <show_password+0xce>
	password_entered = 0;
 390:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <__data_end+0x1>
 394:	10 92 d4 00 	sts	0x00D4, r1	; 0x8000d4 <__data_end>
}
 398:	e2 96       	adiw	r28, 0x32	; 50
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	f8 94       	cli
 39e:	de bf       	out	0x3e, r29	; 62
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	cd bf       	out	0x3d, r28	; 61
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	ff 90       	pop	r15
 3ae:	ef 90       	pop	r14
 3b0:	08 95       	ret

000003b2 <read_keypad>:


uint8_t read_keypad(void)
{
	// Wait for the data to be available
	while (!(PIND & (1 << PD2)));
 3b2:	82 9b       	sbis	0x10, 2	; 16
 3b4:	fe cf       	rjmp	.-4      	; 0x3b2 <read_keypad>

	// Read the data from the keypad
	int value = PINB;
 3b6:	e6 b3       	in	r30, 0x16	; 22
	uint8_t data = 255; // initialize to a default value
	switch (value)
 3b8:	8e 2f       	mov	r24, r30
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	80 31       	cpi	r24, 0x10	; 16
 3be:	91 05       	cpc	r25, r1
 3c0:	08 f0       	brcs	.+2      	; 0x3c4 <read_keypad+0x12>
 3c2:	6d c0       	rjmp	.+218    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 3c4:	fc 01       	movw	r30, r24
 3c6:	e6 5d       	subi	r30, 0xD6	; 214
 3c8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ca:	0c 94 a3 02 	jmp	0x546	; 0x546 <__tablejump2__>
	{
		case 0:
		data = 7;
		LCD_String("*");
 3ce:	8c ec       	ldi	r24, 0xCC	; 204
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_String>
	int value = PINB;
	uint8_t data = 255; // initialize to a default value
	switch (value)
	{
		case 0:
		data = 7;
 3d6:	87 e0       	ldi	r24, 0x07	; 7
		LCD_String("*");
		break;
 3d8:	63 c0       	rjmp	.+198    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
		case 1:
		data = 8;
		LCD_String("*");
 3da:	8c ec       	ldi	r24, 0xCC	; 204
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_String>
		case 0:
		data = 7;
		LCD_String("*");
		break;
		case 1:
		data = 8;
 3e2:	88 e0       	ldi	r24, 0x08	; 8
		LCD_String("*");
		break;
 3e4:	5d c0       	rjmp	.+186    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
		case 2:
		data = 9;
		LCD_String("*");
 3e6:	8c ec       	ldi	r24, 0xCC	; 204
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_String>
		case 1:
		data = 8;
		LCD_String("*");
		break;
		case 2:
		data = 9;
 3ee:	89 e0       	ldi	r24, 0x09	; 9
		LCD_String("*");
		break;
 3f0:	57 c0       	rjmp	.+174    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
		case 3:
		LCD_String("/");
 3f2:	8e ec       	ldi	r24, 0xCE	; 206
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_String>
	// Wait for the data to be available
	while (!(PIND & (1 << PD2)));

	// Read the data from the keypad
	int value = PINB;
	uint8_t data = 255; // initialize to a default value
 3fa:	8f ef       	ldi	r24, 0xFF	; 255
		data = 9;
		LCD_String("*");
		break;
		case 3:
		LCD_String("/");
		break;
 3fc:	51 c0       	rjmp	.+162    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
		case 4:
		data = 4;
		LCD_String("*");
 3fe:	8c ec       	ldi	r24, 0xCC	; 204
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_String>
		break;
		case 3:
		LCD_String("/");
		break;
		case 4:
		data = 4;
 406:	84 e0       	ldi	r24, 0x04	; 4
		LCD_String("*");
		break;
 408:	4b c0       	rjmp	.+150    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
		case 5:
		data = 5;
		LCD_String("*");
 40a:	8c ec       	ldi	r24, 0xCC	; 204
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_String>
		case 4:
		data = 4;
		LCD_String("*");
		break;
		case 5:
		data = 5;
 412:	85 e0       	ldi	r24, 0x05	; 5
		LCD_String("*");
		break;
 414:	45 c0       	rjmp	.+138    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
		case 6:
		data = 6;
		LCD_String("*");
 416:	8c ec       	ldi	r24, 0xCC	; 204
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_String>
		case 5:
		data = 5;
		LCD_String("*");
		break;
		case 6:
		data = 6;
 41e:	86 e0       	ldi	r24, 0x06	; 6
		LCD_String("*");
		break;
 420:	3f c0       	rjmp	.+126    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
		case 7:
		//LCD_String("*");
		//data = 200; // A generic value to indicate that the key is *
		show_password();
 422:	0e 94 5e 01 	call	0x2bc	; 0x2bc <show_password>
	// Wait for the data to be available
	while (!(PIND & (1 << PD2)));

	// Read the data from the keypad
	int value = PINB;
	uint8_t data = 255; // initialize to a default value
 426:	8f ef       	ldi	r24, 0xFF	; 255
		break;
		case 7:
		//LCD_String("*");
		//data = 200; // A generic value to indicate that the key is *
		show_password();
		break;
 428:	3b c0       	rjmp	.+118    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
		case 8:
		data = 1;
		LCD_String("*");
 42a:	8c ec       	ldi	r24, 0xCC	; 204
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_String>
		//LCD_String("*");
		//data = 200; // A generic value to indicate that the key is *
		show_password();
		break;
		case 8:
		data = 1;
 432:	81 e0       	ldi	r24, 0x01	; 1
		LCD_String("*");
		break;
 434:	35 c0       	rjmp	.+106    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
		case 9:
		data = 2;
		LCD_String("*");
 436:	8c ec       	ldi	r24, 0xCC	; 204
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_String>
		case 8:
		data = 1;
		LCD_String("*");
		break;
		case 9:
		data = 2;
 43e:	82 e0       	ldi	r24, 0x02	; 2
		LCD_String("*");
		break;
 440:	2f c0       	rjmp	.+94     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
		case 10:
		data = 3;
		LCD_String("*");
 442:	8c ec       	ldi	r24, 0xCC	; 204
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_String>
		case 9:
		data = 2;
		LCD_String("*");
		break;
		case 10:
		data = 3;
 44a:	83 e0       	ldi	r24, 0x03	; 3
		LCD_String("*");
		break;
 44c:	29 c0       	rjmp	.+82     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
		case 11:
		LCD_String("-");
 44e:	80 ed       	ldi	r24, 0xD0	; 208
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_String>
	// Wait for the data to be available
	while (!(PIND & (1 << PD2)));

	// Read the data from the keypad
	int value = PINB;
	uint8_t data = 255; // initialize to a default value
 456:	8f ef       	ldi	r24, 0xFF	; 255
		data = 3;
		LCD_String("*");
		break;
		case 11:
		LCD_String("-");
		break;
 458:	23 c0       	rjmp	.+70     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
		case 12: // ON/C
		LCD_Clear();
 45a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD_Clear>
		LCD_String("Enter Password: ");
 45e:	88 e9       	ldi	r24, 0x98	; 152
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_String>
		LCD_Cmd(0xC0);
 466:	80 ec       	ldi	r24, 0xC0	; 192
 468:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_Cmd>
		memset(input_password, 0, sizeof(input_password)); // clear out the array
 46c:	88 e0       	ldi	r24, 0x08	; 8
 46e:	e8 e6       	ldi	r30, 0x68	; 104
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	df 01       	movw	r26, r30
 474:	1d 92       	st	X+, r1
 476:	8a 95       	dec	r24
 478:	e9 f7       	brne	.-6      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
	// Wait for the data to be available
	while (!(PIND & (1 << PD2)));

	// Read the data from the keypad
	int value = PINB;
	uint8_t data = 255; // initialize to a default value
 47a:	8f ef       	ldi	r24, 0xFF	; 255
		case 12: // ON/C
		LCD_Clear();
		LCD_String("Enter Password: ");
		LCD_Cmd(0xC0);
		memset(input_password, 0, sizeof(input_password)); // clear out the array
		break;
 47c:	11 c0       	rjmp	.+34     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
		case 13:
		data = 0;
		LCD_String("*");
 47e:	8c ec       	ldi	r24, 0xCC	; 204
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_String>
		LCD_String("Enter Password: ");
		LCD_Cmd(0xC0);
		memset(input_password, 0, sizeof(input_password)); // clear out the array
		break;
		case 13:
		data = 0;
 486:	80 e0       	ldi	r24, 0x00	; 0
		LCD_String("*");
		break;
 488:	0b c0       	rjmp	.+22     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
		case 14:
		//LCD_String("=");
		// data = 201; // A generic value to indicate that the key is =
		check_password();
 48a:	0e 94 03 01 	call	0x206	; 0x206 <check_password>
	// Wait for the data to be available
	while (!(PIND & (1 << PD2)));

	// Read the data from the keypad
	int value = PINB;
	uint8_t data = 255; // initialize to a default value
 48e:	8f ef       	ldi	r24, 0xFF	; 255
		break;
		case 14:
		//LCD_String("=");
		// data = 201; // A generic value to indicate that the key is =
		check_password();
		break;
 490:	07 c0       	rjmp	.+14     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
		case 15:
		LCD_String("+");
 492:	82 ed       	ldi	r24, 0xD2	; 210
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 de 00 	call	0x1bc	; 0x1bc <LCD_String>
	// Wait for the data to be available
	while (!(PIND & (1 << PD2)));

	// Read the data from the keypad
	int value = PINB;
	uint8_t data = 255; // initialize to a default value
 49a:	8f ef       	ldi	r24, 0xFF	; 255
		// data = 201; // A generic value to indicate that the key is =
		check_password();
		break;
		case 15:
		LCD_String("+");
		break;
 49c:	01 c0       	rjmp	.+2      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
	// Wait for the data to be available
	while (!(PIND & (1 << PD2)));

	// Read the data from the keypad
	int value = PINB;
	uint8_t data = 255; // initialize to a default value
 49e:	8f ef       	ldi	r24, 0xFF	; 255
 4a0:	bf e7       	ldi	r27, 0x7F	; 127
 4a2:	28 e3       	ldi	r18, 0x38	; 56
 4a4:	31 e0       	ldi	r19, 0x01	; 1
 4a6:	b1 50       	subi	r27, 0x01	; 1
 4a8:	20 40       	sbci	r18, 0x00	; 0
 4aa:	30 40       	sbci	r19, 0x00	; 0
 4ac:	e1 f7       	brne	.-8      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4b0:	00 00       	nop

	// Debounce delay
	_delay_ms(50);

	return data;
}
 4b2:	08 95       	ret

000004b4 <__vector_1>:
	password_entered = 0;
}



ISR(INT0_vect){
 4b4:	1f 92       	push	r1
 4b6:	0f 92       	push	r0
 4b8:	0f b6       	in	r0, 0x3f	; 63
 4ba:	0f 92       	push	r0
 4bc:	11 24       	eor	r1, r1
 4be:	2f 93       	push	r18
 4c0:	3f 93       	push	r19
 4c2:	4f 93       	push	r20
 4c4:	5f 93       	push	r21
 4c6:	6f 93       	push	r22
 4c8:	7f 93       	push	r23
 4ca:	8f 93       	push	r24
 4cc:	9f 93       	push	r25
 4ce:	af 93       	push	r26
 4d0:	bf 93       	push	r27
 4d2:	ef 93       	push	r30
 4d4:	ff 93       	push	r31
	// return the code of the key pressed and only get 4 digits
	key_code = read_keypad();
 4d6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <read_keypad>
 4da:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <key_code>
	
	if (key_code != 255){
 4de:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <key_code>
 4e2:	8f 3f       	cpi	r24, 0xFF	; 255
 4e4:	f9 f0       	breq	.+62     	; 0x524 <__vector_1+0x70>
		input_password[count] = key_code;
 4e6:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <count>
 4ea:	90 91 d7 00 	lds	r25, 0x00D7	; 0x8000d7 <count+0x1>
 4ee:	20 91 d8 00 	lds	r18, 0x00D8	; 0x8000d8 <key_code>
 4f2:	fc 01       	movw	r30, r24
 4f4:	ee 0f       	add	r30, r30
 4f6:	ff 1f       	adc	r31, r31
 4f8:	e8 59       	subi	r30, 0x98	; 152
 4fa:	ff 4f       	sbci	r31, 0xFF	; 255
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	31 83       	std	Z+1, r19	; 0x01
 500:	20 83       	st	Z, r18
		count ++;
 502:	01 96       	adiw	r24, 0x01	; 1
 504:	90 93 d7 00 	sts	0x00D7, r25	; 0x8000d7 <count+0x1>
 508:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <count>
		if (count == 4){
 50c:	04 97       	sbiw	r24, 0x04	; 4
 50e:	51 f4       	brne	.+20     	; 0x524 <__vector_1+0x70>
			// display the password entered
			count = 0;
 510:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <count+0x1>
 514:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <count>
			password_entered = 1;
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__data_end+0x1>
 520:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__data_end>
			//memset(input_password, 0, sizeof(input_password)); // clear out the array
		}
	}
 524:	ff 91       	pop	r31
 526:	ef 91       	pop	r30
 528:	bf 91       	pop	r27
 52a:	af 91       	pop	r26
 52c:	9f 91       	pop	r25
 52e:	8f 91       	pop	r24
 530:	7f 91       	pop	r23
 532:	6f 91       	pop	r22
 534:	5f 91       	pop	r21
 536:	4f 91       	pop	r20
 538:	3f 91       	pop	r19
 53a:	2f 91       	pop	r18
 53c:	0f 90       	pop	r0
 53e:	0f be       	out	0x3f, r0	; 63
 540:	0f 90       	pop	r0
 542:	1f 90       	pop	r1
 544:	18 95       	reti

00000546 <__tablejump2__>:
 546:	ee 0f       	add	r30, r30
 548:	ff 1f       	adc	r31, r31
 54a:	05 90       	lpm	r0, Z+
 54c:	f4 91       	lpm	r31, Z
 54e:	e0 2d       	mov	r30, r0
 550:	09 94       	ijmp

00000552 <memset>:
 552:	dc 01       	movw	r26, r24
 554:	01 c0       	rjmp	.+2      	; 0x558 <memset+0x6>
 556:	6d 93       	st	X+, r22
 558:	41 50       	subi	r20, 0x01	; 1
 55a:	50 40       	sbci	r21, 0x00	; 0
 55c:	e0 f7       	brcc	.-8      	; 0x556 <memset+0x4>
 55e:	08 95       	ret

00000560 <strcat>:
 560:	fb 01       	movw	r30, r22
 562:	dc 01       	movw	r26, r24
 564:	0d 90       	ld	r0, X+
 566:	00 20       	and	r0, r0
 568:	e9 f7       	brne	.-6      	; 0x564 <strcat+0x4>
 56a:	11 97       	sbiw	r26, 0x01	; 1
 56c:	01 90       	ld	r0, Z+
 56e:	0d 92       	st	X+, r0
 570:	00 20       	and	r0, r0
 572:	e1 f7       	brne	.-8      	; 0x56c <strcat+0xc>
 574:	08 95       	ret

00000576 <sprintf>:
 576:	ae e0       	ldi	r26, 0x0E	; 14
 578:	b0 e0       	ldi	r27, 0x00	; 0
 57a:	e1 ec       	ldi	r30, 0xC1	; 193
 57c:	f2 e0       	ldi	r31, 0x02	; 2
 57e:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <__prologue_saves__+0x1c>
 582:	0d 89       	ldd	r16, Y+21	; 0x15
 584:	1e 89       	ldd	r17, Y+22	; 0x16
 586:	86 e0       	ldi	r24, 0x06	; 6
 588:	8c 83       	std	Y+4, r24	; 0x04
 58a:	1a 83       	std	Y+2, r17	; 0x02
 58c:	09 83       	std	Y+1, r16	; 0x01
 58e:	8f ef       	ldi	r24, 0xFF	; 255
 590:	9f e7       	ldi	r25, 0x7F	; 127
 592:	9e 83       	std	Y+6, r25	; 0x06
 594:	8d 83       	std	Y+5, r24	; 0x05
 596:	ae 01       	movw	r20, r28
 598:	47 5e       	subi	r20, 0xE7	; 231
 59a:	5f 4f       	sbci	r21, 0xFF	; 255
 59c:	6f 89       	ldd	r22, Y+23	; 0x17
 59e:	78 8d       	ldd	r23, Y+24	; 0x18
 5a0:	ce 01       	movw	r24, r28
 5a2:	01 96       	adiw	r24, 0x01	; 1
 5a4:	0e 94 dd 02 	call	0x5ba	; 0x5ba <vfprintf>
 5a8:	ef 81       	ldd	r30, Y+7	; 0x07
 5aa:	f8 85       	ldd	r31, Y+8	; 0x08
 5ac:	e0 0f       	add	r30, r16
 5ae:	f1 1f       	adc	r31, r17
 5b0:	10 82       	st	Z, r1
 5b2:	2e 96       	adiw	r28, 0x0e	; 14
 5b4:	e4 e0       	ldi	r30, 0x04	; 4
 5b6:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__epilogue_restores__+0x1c>

000005ba <vfprintf>:
 5ba:	ab e0       	ldi	r26, 0x0B	; 11
 5bc:	b0 e0       	ldi	r27, 0x00	; 0
 5be:	e3 ee       	ldi	r30, 0xE3	; 227
 5c0:	f2 e0       	ldi	r31, 0x02	; 2
 5c2:	0c 94 6e 05 	jmp	0xadc	; 0xadc <__prologue_saves__>
 5c6:	6c 01       	movw	r12, r24
 5c8:	7b 01       	movw	r14, r22
 5ca:	8a 01       	movw	r16, r20
 5cc:	fc 01       	movw	r30, r24
 5ce:	17 82       	std	Z+7, r1	; 0x07
 5d0:	16 82       	std	Z+6, r1	; 0x06
 5d2:	83 81       	ldd	r24, Z+3	; 0x03
 5d4:	81 ff       	sbrs	r24, 1
 5d6:	cc c1       	rjmp	.+920    	; 0x970 <__stack+0x111>
 5d8:	ce 01       	movw	r24, r28
 5da:	01 96       	adiw	r24, 0x01	; 1
 5dc:	3c 01       	movw	r6, r24
 5de:	f6 01       	movw	r30, r12
 5e0:	93 81       	ldd	r25, Z+3	; 0x03
 5e2:	f7 01       	movw	r30, r14
 5e4:	93 fd       	sbrc	r25, 3
 5e6:	85 91       	lpm	r24, Z+
 5e8:	93 ff       	sbrs	r25, 3
 5ea:	81 91       	ld	r24, Z+
 5ec:	7f 01       	movw	r14, r30
 5ee:	88 23       	and	r24, r24
 5f0:	09 f4       	brne	.+2      	; 0x5f4 <vfprintf+0x3a>
 5f2:	ba c1       	rjmp	.+884    	; 0x968 <__stack+0x109>
 5f4:	85 32       	cpi	r24, 0x25	; 37
 5f6:	39 f4       	brne	.+14     	; 0x606 <vfprintf+0x4c>
 5f8:	93 fd       	sbrc	r25, 3
 5fa:	85 91       	lpm	r24, Z+
 5fc:	93 ff       	sbrs	r25, 3
 5fe:	81 91       	ld	r24, Z+
 600:	7f 01       	movw	r14, r30
 602:	85 32       	cpi	r24, 0x25	; 37
 604:	29 f4       	brne	.+10     	; 0x610 <vfprintf+0x56>
 606:	b6 01       	movw	r22, r12
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <fputc>
 60e:	e7 cf       	rjmp	.-50     	; 0x5de <vfprintf+0x24>
 610:	91 2c       	mov	r9, r1
 612:	21 2c       	mov	r2, r1
 614:	31 2c       	mov	r3, r1
 616:	ff e1       	ldi	r31, 0x1F	; 31
 618:	f3 15       	cp	r31, r3
 61a:	d8 f0       	brcs	.+54     	; 0x652 <vfprintf+0x98>
 61c:	8b 32       	cpi	r24, 0x2B	; 43
 61e:	79 f0       	breq	.+30     	; 0x63e <vfprintf+0x84>
 620:	38 f4       	brcc	.+14     	; 0x630 <vfprintf+0x76>
 622:	80 32       	cpi	r24, 0x20	; 32
 624:	79 f0       	breq	.+30     	; 0x644 <vfprintf+0x8a>
 626:	83 32       	cpi	r24, 0x23	; 35
 628:	a1 f4       	brne	.+40     	; 0x652 <vfprintf+0x98>
 62a:	23 2d       	mov	r18, r3
 62c:	20 61       	ori	r18, 0x10	; 16
 62e:	1d c0       	rjmp	.+58     	; 0x66a <vfprintf+0xb0>
 630:	8d 32       	cpi	r24, 0x2D	; 45
 632:	61 f0       	breq	.+24     	; 0x64c <vfprintf+0x92>
 634:	80 33       	cpi	r24, 0x30	; 48
 636:	69 f4       	brne	.+26     	; 0x652 <vfprintf+0x98>
 638:	23 2d       	mov	r18, r3
 63a:	21 60       	ori	r18, 0x01	; 1
 63c:	16 c0       	rjmp	.+44     	; 0x66a <vfprintf+0xb0>
 63e:	83 2d       	mov	r24, r3
 640:	82 60       	ori	r24, 0x02	; 2
 642:	38 2e       	mov	r3, r24
 644:	e3 2d       	mov	r30, r3
 646:	e4 60       	ori	r30, 0x04	; 4
 648:	3e 2e       	mov	r3, r30
 64a:	2a c0       	rjmp	.+84     	; 0x6a0 <vfprintf+0xe6>
 64c:	f3 2d       	mov	r31, r3
 64e:	f8 60       	ori	r31, 0x08	; 8
 650:	1d c0       	rjmp	.+58     	; 0x68c <vfprintf+0xd2>
 652:	37 fc       	sbrc	r3, 7
 654:	2d c0       	rjmp	.+90     	; 0x6b0 <vfprintf+0xf6>
 656:	20 ed       	ldi	r18, 0xD0	; 208
 658:	28 0f       	add	r18, r24
 65a:	2a 30       	cpi	r18, 0x0A	; 10
 65c:	40 f0       	brcs	.+16     	; 0x66e <vfprintf+0xb4>
 65e:	8e 32       	cpi	r24, 0x2E	; 46
 660:	b9 f4       	brne	.+46     	; 0x690 <vfprintf+0xd6>
 662:	36 fc       	sbrc	r3, 6
 664:	81 c1       	rjmp	.+770    	; 0x968 <__stack+0x109>
 666:	23 2d       	mov	r18, r3
 668:	20 64       	ori	r18, 0x40	; 64
 66a:	32 2e       	mov	r3, r18
 66c:	19 c0       	rjmp	.+50     	; 0x6a0 <vfprintf+0xe6>
 66e:	36 fe       	sbrs	r3, 6
 670:	06 c0       	rjmp	.+12     	; 0x67e <vfprintf+0xc4>
 672:	8a e0       	ldi	r24, 0x0A	; 10
 674:	98 9e       	mul	r9, r24
 676:	20 0d       	add	r18, r0
 678:	11 24       	eor	r1, r1
 67a:	92 2e       	mov	r9, r18
 67c:	11 c0       	rjmp	.+34     	; 0x6a0 <vfprintf+0xe6>
 67e:	ea e0       	ldi	r30, 0x0A	; 10
 680:	2e 9e       	mul	r2, r30
 682:	20 0d       	add	r18, r0
 684:	11 24       	eor	r1, r1
 686:	22 2e       	mov	r2, r18
 688:	f3 2d       	mov	r31, r3
 68a:	f0 62       	ori	r31, 0x20	; 32
 68c:	3f 2e       	mov	r3, r31
 68e:	08 c0       	rjmp	.+16     	; 0x6a0 <vfprintf+0xe6>
 690:	8c 36       	cpi	r24, 0x6C	; 108
 692:	21 f4       	brne	.+8      	; 0x69c <vfprintf+0xe2>
 694:	83 2d       	mov	r24, r3
 696:	80 68       	ori	r24, 0x80	; 128
 698:	38 2e       	mov	r3, r24
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <vfprintf+0xe6>
 69c:	88 36       	cpi	r24, 0x68	; 104
 69e:	41 f4       	brne	.+16     	; 0x6b0 <vfprintf+0xf6>
 6a0:	f7 01       	movw	r30, r14
 6a2:	93 fd       	sbrc	r25, 3
 6a4:	85 91       	lpm	r24, Z+
 6a6:	93 ff       	sbrs	r25, 3
 6a8:	81 91       	ld	r24, Z+
 6aa:	7f 01       	movw	r14, r30
 6ac:	81 11       	cpse	r24, r1
 6ae:	b3 cf       	rjmp	.-154    	; 0x616 <vfprintf+0x5c>
 6b0:	98 2f       	mov	r25, r24
 6b2:	9f 7d       	andi	r25, 0xDF	; 223
 6b4:	95 54       	subi	r25, 0x45	; 69
 6b6:	93 30       	cpi	r25, 0x03	; 3
 6b8:	28 f4       	brcc	.+10     	; 0x6c4 <vfprintf+0x10a>
 6ba:	0c 5f       	subi	r16, 0xFC	; 252
 6bc:	1f 4f       	sbci	r17, 0xFF	; 255
 6be:	9f e3       	ldi	r25, 0x3F	; 63
 6c0:	99 83       	std	Y+1, r25	; 0x01
 6c2:	0d c0       	rjmp	.+26     	; 0x6de <vfprintf+0x124>
 6c4:	83 36       	cpi	r24, 0x63	; 99
 6c6:	31 f0       	breq	.+12     	; 0x6d4 <vfprintf+0x11a>
 6c8:	83 37       	cpi	r24, 0x73	; 115
 6ca:	71 f0       	breq	.+28     	; 0x6e8 <vfprintf+0x12e>
 6cc:	83 35       	cpi	r24, 0x53	; 83
 6ce:	09 f0       	breq	.+2      	; 0x6d2 <vfprintf+0x118>
 6d0:	59 c0       	rjmp	.+178    	; 0x784 <vfprintf+0x1ca>
 6d2:	21 c0       	rjmp	.+66     	; 0x716 <vfprintf+0x15c>
 6d4:	f8 01       	movw	r30, r16
 6d6:	80 81       	ld	r24, Z
 6d8:	89 83       	std	Y+1, r24	; 0x01
 6da:	0e 5f       	subi	r16, 0xFE	; 254
 6dc:	1f 4f       	sbci	r17, 0xFF	; 255
 6de:	88 24       	eor	r8, r8
 6e0:	83 94       	inc	r8
 6e2:	91 2c       	mov	r9, r1
 6e4:	53 01       	movw	r10, r6
 6e6:	13 c0       	rjmp	.+38     	; 0x70e <vfprintf+0x154>
 6e8:	28 01       	movw	r4, r16
 6ea:	f2 e0       	ldi	r31, 0x02	; 2
 6ec:	4f 0e       	add	r4, r31
 6ee:	51 1c       	adc	r5, r1
 6f0:	f8 01       	movw	r30, r16
 6f2:	a0 80       	ld	r10, Z
 6f4:	b1 80       	ldd	r11, Z+1	; 0x01
 6f6:	36 fe       	sbrs	r3, 6
 6f8:	03 c0       	rjmp	.+6      	; 0x700 <vfprintf+0x146>
 6fa:	69 2d       	mov	r22, r9
 6fc:	70 e0       	ldi	r23, 0x00	; 0
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <vfprintf+0x14a>
 700:	6f ef       	ldi	r22, 0xFF	; 255
 702:	7f ef       	ldi	r23, 0xFF	; 255
 704:	c5 01       	movw	r24, r10
 706:	0e 94 c9 04 	call	0x992	; 0x992 <strnlen>
 70a:	4c 01       	movw	r8, r24
 70c:	82 01       	movw	r16, r4
 70e:	f3 2d       	mov	r31, r3
 710:	ff 77       	andi	r31, 0x7F	; 127
 712:	3f 2e       	mov	r3, r31
 714:	16 c0       	rjmp	.+44     	; 0x742 <vfprintf+0x188>
 716:	28 01       	movw	r4, r16
 718:	22 e0       	ldi	r18, 0x02	; 2
 71a:	42 0e       	add	r4, r18
 71c:	51 1c       	adc	r5, r1
 71e:	f8 01       	movw	r30, r16
 720:	a0 80       	ld	r10, Z
 722:	b1 80       	ldd	r11, Z+1	; 0x01
 724:	36 fe       	sbrs	r3, 6
 726:	03 c0       	rjmp	.+6      	; 0x72e <vfprintf+0x174>
 728:	69 2d       	mov	r22, r9
 72a:	70 e0       	ldi	r23, 0x00	; 0
 72c:	02 c0       	rjmp	.+4      	; 0x732 <vfprintf+0x178>
 72e:	6f ef       	ldi	r22, 0xFF	; 255
 730:	7f ef       	ldi	r23, 0xFF	; 255
 732:	c5 01       	movw	r24, r10
 734:	0e 94 be 04 	call	0x97c	; 0x97c <strnlen_P>
 738:	4c 01       	movw	r8, r24
 73a:	f3 2d       	mov	r31, r3
 73c:	f0 68       	ori	r31, 0x80	; 128
 73e:	3f 2e       	mov	r3, r31
 740:	82 01       	movw	r16, r4
 742:	33 fc       	sbrc	r3, 3
 744:	1b c0       	rjmp	.+54     	; 0x77c <vfprintf+0x1c2>
 746:	82 2d       	mov	r24, r2
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	88 16       	cp	r8, r24
 74c:	99 06       	cpc	r9, r25
 74e:	b0 f4       	brcc	.+44     	; 0x77c <vfprintf+0x1c2>
 750:	b6 01       	movw	r22, r12
 752:	80 e2       	ldi	r24, 0x20	; 32
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <fputc>
 75a:	2a 94       	dec	r2
 75c:	f4 cf       	rjmp	.-24     	; 0x746 <vfprintf+0x18c>
 75e:	f5 01       	movw	r30, r10
 760:	37 fc       	sbrc	r3, 7
 762:	85 91       	lpm	r24, Z+
 764:	37 fe       	sbrs	r3, 7
 766:	81 91       	ld	r24, Z+
 768:	5f 01       	movw	r10, r30
 76a:	b6 01       	movw	r22, r12
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <fputc>
 772:	21 10       	cpse	r2, r1
 774:	2a 94       	dec	r2
 776:	21 e0       	ldi	r18, 0x01	; 1
 778:	82 1a       	sub	r8, r18
 77a:	91 08       	sbc	r9, r1
 77c:	81 14       	cp	r8, r1
 77e:	91 04       	cpc	r9, r1
 780:	71 f7       	brne	.-36     	; 0x75e <vfprintf+0x1a4>
 782:	e8 c0       	rjmp	.+464    	; 0x954 <__stack+0xf5>
 784:	84 36       	cpi	r24, 0x64	; 100
 786:	11 f0       	breq	.+4      	; 0x78c <vfprintf+0x1d2>
 788:	89 36       	cpi	r24, 0x69	; 105
 78a:	41 f5       	brne	.+80     	; 0x7dc <vfprintf+0x222>
 78c:	f8 01       	movw	r30, r16
 78e:	37 fe       	sbrs	r3, 7
 790:	07 c0       	rjmp	.+14     	; 0x7a0 <vfprintf+0x1e6>
 792:	60 81       	ld	r22, Z
 794:	71 81       	ldd	r23, Z+1	; 0x01
 796:	82 81       	ldd	r24, Z+2	; 0x02
 798:	93 81       	ldd	r25, Z+3	; 0x03
 79a:	0c 5f       	subi	r16, 0xFC	; 252
 79c:	1f 4f       	sbci	r17, 0xFF	; 255
 79e:	08 c0       	rjmp	.+16     	; 0x7b0 <vfprintf+0x1f6>
 7a0:	60 81       	ld	r22, Z
 7a2:	71 81       	ldd	r23, Z+1	; 0x01
 7a4:	07 2e       	mov	r0, r23
 7a6:	00 0c       	add	r0, r0
 7a8:	88 0b       	sbc	r24, r24
 7aa:	99 0b       	sbc	r25, r25
 7ac:	0e 5f       	subi	r16, 0xFE	; 254
 7ae:	1f 4f       	sbci	r17, 0xFF	; 255
 7b0:	f3 2d       	mov	r31, r3
 7b2:	ff 76       	andi	r31, 0x6F	; 111
 7b4:	3f 2e       	mov	r3, r31
 7b6:	97 ff       	sbrs	r25, 7
 7b8:	09 c0       	rjmp	.+18     	; 0x7cc <vfprintf+0x212>
 7ba:	90 95       	com	r25
 7bc:	80 95       	com	r24
 7be:	70 95       	com	r23
 7c0:	61 95       	neg	r22
 7c2:	7f 4f       	sbci	r23, 0xFF	; 255
 7c4:	8f 4f       	sbci	r24, 0xFF	; 255
 7c6:	9f 4f       	sbci	r25, 0xFF	; 255
 7c8:	f0 68       	ori	r31, 0x80	; 128
 7ca:	3f 2e       	mov	r3, r31
 7cc:	2a e0       	ldi	r18, 0x0A	; 10
 7ce:	30 e0       	ldi	r19, 0x00	; 0
 7d0:	a3 01       	movw	r20, r6
 7d2:	0e 94 10 05 	call	0xa20	; 0xa20 <__ultoa_invert>
 7d6:	88 2e       	mov	r8, r24
 7d8:	86 18       	sub	r8, r6
 7da:	45 c0       	rjmp	.+138    	; 0x866 <__stack+0x7>
 7dc:	85 37       	cpi	r24, 0x75	; 117
 7de:	31 f4       	brne	.+12     	; 0x7ec <vfprintf+0x232>
 7e0:	23 2d       	mov	r18, r3
 7e2:	2f 7e       	andi	r18, 0xEF	; 239
 7e4:	b2 2e       	mov	r11, r18
 7e6:	2a e0       	ldi	r18, 0x0A	; 10
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	25 c0       	rjmp	.+74     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 7ec:	93 2d       	mov	r25, r3
 7ee:	99 7f       	andi	r25, 0xF9	; 249
 7f0:	b9 2e       	mov	r11, r25
 7f2:	8f 36       	cpi	r24, 0x6F	; 111
 7f4:	c1 f0       	breq	.+48     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7f6:	18 f4       	brcc	.+6      	; 0x7fe <vfprintf+0x244>
 7f8:	88 35       	cpi	r24, 0x58	; 88
 7fa:	79 f0       	breq	.+30     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7fc:	b5 c0       	rjmp	.+362    	; 0x968 <__stack+0x109>
 7fe:	80 37       	cpi	r24, 0x70	; 112
 800:	19 f0       	breq	.+6      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 802:	88 37       	cpi	r24, 0x78	; 120
 804:	21 f0       	breq	.+8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 806:	b0 c0       	rjmp	.+352    	; 0x968 <__stack+0x109>
 808:	e9 2f       	mov	r30, r25
 80a:	e0 61       	ori	r30, 0x10	; 16
 80c:	be 2e       	mov	r11, r30
 80e:	b4 fe       	sbrs	r11, 4
 810:	0d c0       	rjmp	.+26     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 812:	fb 2d       	mov	r31, r11
 814:	f4 60       	ori	r31, 0x04	; 4
 816:	bf 2e       	mov	r11, r31
 818:	09 c0       	rjmp	.+18     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 81a:	34 fe       	sbrs	r3, 4
 81c:	0a c0       	rjmp	.+20     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 81e:	29 2f       	mov	r18, r25
 820:	26 60       	ori	r18, 0x06	; 6
 822:	b2 2e       	mov	r11, r18
 824:	06 c0       	rjmp	.+12     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 826:	28 e0       	ldi	r18, 0x08	; 8
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	05 c0       	rjmp	.+10     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 82c:	20 e1       	ldi	r18, 0x10	; 16
 82e:	30 e0       	ldi	r19, 0x00	; 0
 830:	02 c0       	rjmp	.+4      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 832:	20 e1       	ldi	r18, 0x10	; 16
 834:	32 e0       	ldi	r19, 0x02	; 2
 836:	f8 01       	movw	r30, r16
 838:	b7 fe       	sbrs	r11, 7
 83a:	07 c0       	rjmp	.+14     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 83c:	60 81       	ld	r22, Z
 83e:	71 81       	ldd	r23, Z+1	; 0x01
 840:	82 81       	ldd	r24, Z+2	; 0x02
 842:	93 81       	ldd	r25, Z+3	; 0x03
 844:	0c 5f       	subi	r16, 0xFC	; 252
 846:	1f 4f       	sbci	r17, 0xFF	; 255
 848:	06 c0       	rjmp	.+12     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 84a:	60 81       	ld	r22, Z
 84c:	71 81       	ldd	r23, Z+1	; 0x01
 84e:	80 e0       	ldi	r24, 0x00	; 0
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	0e 5f       	subi	r16, 0xFE	; 254
 854:	1f 4f       	sbci	r17, 0xFF	; 255
 856:	a3 01       	movw	r20, r6
 858:	0e 94 10 05 	call	0xa20	; 0xa20 <__ultoa_invert>
 85c:	88 2e       	mov	r8, r24
 85e:	86 18       	sub	r8, r6
 860:	fb 2d       	mov	r31, r11
 862:	ff 77       	andi	r31, 0x7F	; 127
 864:	3f 2e       	mov	r3, r31
 866:	36 fe       	sbrs	r3, 6
 868:	0d c0       	rjmp	.+26     	; 0x884 <__stack+0x25>
 86a:	23 2d       	mov	r18, r3
 86c:	2e 7f       	andi	r18, 0xFE	; 254
 86e:	a2 2e       	mov	r10, r18
 870:	89 14       	cp	r8, r9
 872:	58 f4       	brcc	.+22     	; 0x88a <__stack+0x2b>
 874:	34 fe       	sbrs	r3, 4
 876:	0b c0       	rjmp	.+22     	; 0x88e <__stack+0x2f>
 878:	32 fc       	sbrc	r3, 2
 87a:	09 c0       	rjmp	.+18     	; 0x88e <__stack+0x2f>
 87c:	83 2d       	mov	r24, r3
 87e:	8e 7e       	andi	r24, 0xEE	; 238
 880:	a8 2e       	mov	r10, r24
 882:	05 c0       	rjmp	.+10     	; 0x88e <__stack+0x2f>
 884:	b8 2c       	mov	r11, r8
 886:	a3 2c       	mov	r10, r3
 888:	03 c0       	rjmp	.+6      	; 0x890 <__stack+0x31>
 88a:	b8 2c       	mov	r11, r8
 88c:	01 c0       	rjmp	.+2      	; 0x890 <__stack+0x31>
 88e:	b9 2c       	mov	r11, r9
 890:	a4 fe       	sbrs	r10, 4
 892:	0f c0       	rjmp	.+30     	; 0x8b2 <__stack+0x53>
 894:	fe 01       	movw	r30, r28
 896:	e8 0d       	add	r30, r8
 898:	f1 1d       	adc	r31, r1
 89a:	80 81       	ld	r24, Z
 89c:	80 33       	cpi	r24, 0x30	; 48
 89e:	21 f4       	brne	.+8      	; 0x8a8 <__stack+0x49>
 8a0:	9a 2d       	mov	r25, r10
 8a2:	99 7e       	andi	r25, 0xE9	; 233
 8a4:	a9 2e       	mov	r10, r25
 8a6:	09 c0       	rjmp	.+18     	; 0x8ba <__stack+0x5b>
 8a8:	a2 fe       	sbrs	r10, 2
 8aa:	06 c0       	rjmp	.+12     	; 0x8b8 <__stack+0x59>
 8ac:	b3 94       	inc	r11
 8ae:	b3 94       	inc	r11
 8b0:	04 c0       	rjmp	.+8      	; 0x8ba <__stack+0x5b>
 8b2:	8a 2d       	mov	r24, r10
 8b4:	86 78       	andi	r24, 0x86	; 134
 8b6:	09 f0       	breq	.+2      	; 0x8ba <__stack+0x5b>
 8b8:	b3 94       	inc	r11
 8ba:	a3 fc       	sbrc	r10, 3
 8bc:	11 c0       	rjmp	.+34     	; 0x8e0 <__stack+0x81>
 8be:	a0 fe       	sbrs	r10, 0
 8c0:	06 c0       	rjmp	.+12     	; 0x8ce <__stack+0x6f>
 8c2:	b2 14       	cp	r11, r2
 8c4:	88 f4       	brcc	.+34     	; 0x8e8 <__stack+0x89>
 8c6:	28 0c       	add	r2, r8
 8c8:	92 2c       	mov	r9, r2
 8ca:	9b 18       	sub	r9, r11
 8cc:	0e c0       	rjmp	.+28     	; 0x8ea <__stack+0x8b>
 8ce:	b2 14       	cp	r11, r2
 8d0:	60 f4       	brcc	.+24     	; 0x8ea <__stack+0x8b>
 8d2:	b6 01       	movw	r22, r12
 8d4:	80 e2       	ldi	r24, 0x20	; 32
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <fputc>
 8dc:	b3 94       	inc	r11
 8de:	f7 cf       	rjmp	.-18     	; 0x8ce <__stack+0x6f>
 8e0:	b2 14       	cp	r11, r2
 8e2:	18 f4       	brcc	.+6      	; 0x8ea <__stack+0x8b>
 8e4:	2b 18       	sub	r2, r11
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <__stack+0x8d>
 8e8:	98 2c       	mov	r9, r8
 8ea:	21 2c       	mov	r2, r1
 8ec:	a4 fe       	sbrs	r10, 4
 8ee:	10 c0       	rjmp	.+32     	; 0x910 <__stack+0xb1>
 8f0:	b6 01       	movw	r22, r12
 8f2:	80 e3       	ldi	r24, 0x30	; 48
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <fputc>
 8fa:	a2 fe       	sbrs	r10, 2
 8fc:	17 c0       	rjmp	.+46     	; 0x92c <__stack+0xcd>
 8fe:	a1 fc       	sbrc	r10, 1
 900:	03 c0       	rjmp	.+6      	; 0x908 <__stack+0xa9>
 902:	88 e7       	ldi	r24, 0x78	; 120
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	02 c0       	rjmp	.+4      	; 0x90c <__stack+0xad>
 908:	88 e5       	ldi	r24, 0x58	; 88
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	b6 01       	movw	r22, r12
 90e:	0c c0       	rjmp	.+24     	; 0x928 <__stack+0xc9>
 910:	8a 2d       	mov	r24, r10
 912:	86 78       	andi	r24, 0x86	; 134
 914:	59 f0       	breq	.+22     	; 0x92c <__stack+0xcd>
 916:	a1 fe       	sbrs	r10, 1
 918:	02 c0       	rjmp	.+4      	; 0x91e <__stack+0xbf>
 91a:	8b e2       	ldi	r24, 0x2B	; 43
 91c:	01 c0       	rjmp	.+2      	; 0x920 <__stack+0xc1>
 91e:	80 e2       	ldi	r24, 0x20	; 32
 920:	a7 fc       	sbrc	r10, 7
 922:	8d e2       	ldi	r24, 0x2D	; 45
 924:	b6 01       	movw	r22, r12
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <fputc>
 92c:	89 14       	cp	r8, r9
 92e:	38 f4       	brcc	.+14     	; 0x93e <__stack+0xdf>
 930:	b6 01       	movw	r22, r12
 932:	80 e3       	ldi	r24, 0x30	; 48
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <fputc>
 93a:	9a 94       	dec	r9
 93c:	f7 cf       	rjmp	.-18     	; 0x92c <__stack+0xcd>
 93e:	8a 94       	dec	r8
 940:	f3 01       	movw	r30, r6
 942:	e8 0d       	add	r30, r8
 944:	f1 1d       	adc	r31, r1
 946:	80 81       	ld	r24, Z
 948:	b6 01       	movw	r22, r12
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <fputc>
 950:	81 10       	cpse	r8, r1
 952:	f5 cf       	rjmp	.-22     	; 0x93e <__stack+0xdf>
 954:	22 20       	and	r2, r2
 956:	09 f4       	brne	.+2      	; 0x95a <__stack+0xfb>
 958:	42 ce       	rjmp	.-892    	; 0x5de <vfprintf+0x24>
 95a:	b6 01       	movw	r22, r12
 95c:	80 e2       	ldi	r24, 0x20	; 32
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <fputc>
 964:	2a 94       	dec	r2
 966:	f6 cf       	rjmp	.-20     	; 0x954 <__stack+0xf5>
 968:	f6 01       	movw	r30, r12
 96a:	86 81       	ldd	r24, Z+6	; 0x06
 96c:	97 81       	ldd	r25, Z+7	; 0x07
 96e:	02 c0       	rjmp	.+4      	; 0x974 <__stack+0x115>
 970:	8f ef       	ldi	r24, 0xFF	; 255
 972:	9f ef       	ldi	r25, 0xFF	; 255
 974:	2b 96       	adiw	r28, 0x0b	; 11
 976:	e2 e1       	ldi	r30, 0x12	; 18
 978:	0c 94 8a 05 	jmp	0xb14	; 0xb14 <__epilogue_restores__>

0000097c <strnlen_P>:
 97c:	fc 01       	movw	r30, r24
 97e:	05 90       	lpm	r0, Z+
 980:	61 50       	subi	r22, 0x01	; 1
 982:	70 40       	sbci	r23, 0x00	; 0
 984:	01 10       	cpse	r0, r1
 986:	d8 f7       	brcc	.-10     	; 0x97e <strnlen_P+0x2>
 988:	80 95       	com	r24
 98a:	90 95       	com	r25
 98c:	8e 0f       	add	r24, r30
 98e:	9f 1f       	adc	r25, r31
 990:	08 95       	ret

00000992 <strnlen>:
 992:	fc 01       	movw	r30, r24
 994:	61 50       	subi	r22, 0x01	; 1
 996:	70 40       	sbci	r23, 0x00	; 0
 998:	01 90       	ld	r0, Z+
 99a:	01 10       	cpse	r0, r1
 99c:	d8 f7       	brcc	.-10     	; 0x994 <strnlen+0x2>
 99e:	80 95       	com	r24
 9a0:	90 95       	com	r25
 9a2:	8e 0f       	add	r24, r30
 9a4:	9f 1f       	adc	r25, r31
 9a6:	08 95       	ret

000009a8 <fputc>:
 9a8:	0f 93       	push	r16
 9aa:	1f 93       	push	r17
 9ac:	cf 93       	push	r28
 9ae:	df 93       	push	r29
 9b0:	fb 01       	movw	r30, r22
 9b2:	23 81       	ldd	r18, Z+3	; 0x03
 9b4:	21 fd       	sbrc	r18, 1
 9b6:	03 c0       	rjmp	.+6      	; 0x9be <fputc+0x16>
 9b8:	8f ef       	ldi	r24, 0xFF	; 255
 9ba:	9f ef       	ldi	r25, 0xFF	; 255
 9bc:	2c c0       	rjmp	.+88     	; 0xa16 <fputc+0x6e>
 9be:	22 ff       	sbrs	r18, 2
 9c0:	16 c0       	rjmp	.+44     	; 0x9ee <fputc+0x46>
 9c2:	46 81       	ldd	r20, Z+6	; 0x06
 9c4:	57 81       	ldd	r21, Z+7	; 0x07
 9c6:	24 81       	ldd	r18, Z+4	; 0x04
 9c8:	35 81       	ldd	r19, Z+5	; 0x05
 9ca:	42 17       	cp	r20, r18
 9cc:	53 07       	cpc	r21, r19
 9ce:	44 f4       	brge	.+16     	; 0x9e0 <fputc+0x38>
 9d0:	a0 81       	ld	r26, Z
 9d2:	b1 81       	ldd	r27, Z+1	; 0x01
 9d4:	9d 01       	movw	r18, r26
 9d6:	2f 5f       	subi	r18, 0xFF	; 255
 9d8:	3f 4f       	sbci	r19, 0xFF	; 255
 9da:	31 83       	std	Z+1, r19	; 0x01
 9dc:	20 83       	st	Z, r18
 9de:	8c 93       	st	X, r24
 9e0:	26 81       	ldd	r18, Z+6	; 0x06
 9e2:	37 81       	ldd	r19, Z+7	; 0x07
 9e4:	2f 5f       	subi	r18, 0xFF	; 255
 9e6:	3f 4f       	sbci	r19, 0xFF	; 255
 9e8:	37 83       	std	Z+7, r19	; 0x07
 9ea:	26 83       	std	Z+6, r18	; 0x06
 9ec:	14 c0       	rjmp	.+40     	; 0xa16 <fputc+0x6e>
 9ee:	8b 01       	movw	r16, r22
 9f0:	ec 01       	movw	r28, r24
 9f2:	fb 01       	movw	r30, r22
 9f4:	00 84       	ldd	r0, Z+8	; 0x08
 9f6:	f1 85       	ldd	r31, Z+9	; 0x09
 9f8:	e0 2d       	mov	r30, r0
 9fa:	09 95       	icall
 9fc:	89 2b       	or	r24, r25
 9fe:	e1 f6       	brne	.-72     	; 0x9b8 <fputc+0x10>
 a00:	d8 01       	movw	r26, r16
 a02:	16 96       	adiw	r26, 0x06	; 6
 a04:	8d 91       	ld	r24, X+
 a06:	9c 91       	ld	r25, X
 a08:	17 97       	sbiw	r26, 0x07	; 7
 a0a:	01 96       	adiw	r24, 0x01	; 1
 a0c:	17 96       	adiw	r26, 0x07	; 7
 a0e:	9c 93       	st	X, r25
 a10:	8e 93       	st	-X, r24
 a12:	16 97       	sbiw	r26, 0x06	; 6
 a14:	ce 01       	movw	r24, r28
 a16:	df 91       	pop	r29
 a18:	cf 91       	pop	r28
 a1a:	1f 91       	pop	r17
 a1c:	0f 91       	pop	r16
 a1e:	08 95       	ret

00000a20 <__ultoa_invert>:
 a20:	fa 01       	movw	r30, r20
 a22:	aa 27       	eor	r26, r26
 a24:	28 30       	cpi	r18, 0x08	; 8
 a26:	51 f1       	breq	.+84     	; 0xa7c <__ultoa_invert+0x5c>
 a28:	20 31       	cpi	r18, 0x10	; 16
 a2a:	81 f1       	breq	.+96     	; 0xa8c <__ultoa_invert+0x6c>
 a2c:	e8 94       	clt
 a2e:	6f 93       	push	r22
 a30:	6e 7f       	andi	r22, 0xFE	; 254
 a32:	6e 5f       	subi	r22, 0xFE	; 254
 a34:	7f 4f       	sbci	r23, 0xFF	; 255
 a36:	8f 4f       	sbci	r24, 0xFF	; 255
 a38:	9f 4f       	sbci	r25, 0xFF	; 255
 a3a:	af 4f       	sbci	r26, 0xFF	; 255
 a3c:	b1 e0       	ldi	r27, 0x01	; 1
 a3e:	3e d0       	rcall	.+124    	; 0xabc <__ultoa_invert+0x9c>
 a40:	b4 e0       	ldi	r27, 0x04	; 4
 a42:	3c d0       	rcall	.+120    	; 0xabc <__ultoa_invert+0x9c>
 a44:	67 0f       	add	r22, r23
 a46:	78 1f       	adc	r23, r24
 a48:	89 1f       	adc	r24, r25
 a4a:	9a 1f       	adc	r25, r26
 a4c:	a1 1d       	adc	r26, r1
 a4e:	68 0f       	add	r22, r24
 a50:	79 1f       	adc	r23, r25
 a52:	8a 1f       	adc	r24, r26
 a54:	91 1d       	adc	r25, r1
 a56:	a1 1d       	adc	r26, r1
 a58:	6a 0f       	add	r22, r26
 a5a:	71 1d       	adc	r23, r1
 a5c:	81 1d       	adc	r24, r1
 a5e:	91 1d       	adc	r25, r1
 a60:	a1 1d       	adc	r26, r1
 a62:	20 d0       	rcall	.+64     	; 0xaa4 <__ultoa_invert+0x84>
 a64:	09 f4       	brne	.+2      	; 0xa68 <__ultoa_invert+0x48>
 a66:	68 94       	set
 a68:	3f 91       	pop	r19
 a6a:	2a e0       	ldi	r18, 0x0A	; 10
 a6c:	26 9f       	mul	r18, r22
 a6e:	11 24       	eor	r1, r1
 a70:	30 19       	sub	r19, r0
 a72:	30 5d       	subi	r19, 0xD0	; 208
 a74:	31 93       	st	Z+, r19
 a76:	de f6       	brtc	.-74     	; 0xa2e <__ultoa_invert+0xe>
 a78:	cf 01       	movw	r24, r30
 a7a:	08 95       	ret
 a7c:	46 2f       	mov	r20, r22
 a7e:	47 70       	andi	r20, 0x07	; 7
 a80:	40 5d       	subi	r20, 0xD0	; 208
 a82:	41 93       	st	Z+, r20
 a84:	b3 e0       	ldi	r27, 0x03	; 3
 a86:	0f d0       	rcall	.+30     	; 0xaa6 <__ultoa_invert+0x86>
 a88:	c9 f7       	brne	.-14     	; 0xa7c <__ultoa_invert+0x5c>
 a8a:	f6 cf       	rjmp	.-20     	; 0xa78 <__ultoa_invert+0x58>
 a8c:	46 2f       	mov	r20, r22
 a8e:	4f 70       	andi	r20, 0x0F	; 15
 a90:	40 5d       	subi	r20, 0xD0	; 208
 a92:	4a 33       	cpi	r20, 0x3A	; 58
 a94:	18 f0       	brcs	.+6      	; 0xa9c <__ultoa_invert+0x7c>
 a96:	49 5d       	subi	r20, 0xD9	; 217
 a98:	31 fd       	sbrc	r19, 1
 a9a:	40 52       	subi	r20, 0x20	; 32
 a9c:	41 93       	st	Z+, r20
 a9e:	02 d0       	rcall	.+4      	; 0xaa4 <__ultoa_invert+0x84>
 aa0:	a9 f7       	brne	.-22     	; 0xa8c <__ultoa_invert+0x6c>
 aa2:	ea cf       	rjmp	.-44     	; 0xa78 <__ultoa_invert+0x58>
 aa4:	b4 e0       	ldi	r27, 0x04	; 4
 aa6:	a6 95       	lsr	r26
 aa8:	97 95       	ror	r25
 aaa:	87 95       	ror	r24
 aac:	77 95       	ror	r23
 aae:	67 95       	ror	r22
 ab0:	ba 95       	dec	r27
 ab2:	c9 f7       	brne	.-14     	; 0xaa6 <__ultoa_invert+0x86>
 ab4:	00 97       	sbiw	r24, 0x00	; 0
 ab6:	61 05       	cpc	r22, r1
 ab8:	71 05       	cpc	r23, r1
 aba:	08 95       	ret
 abc:	9b 01       	movw	r18, r22
 abe:	ac 01       	movw	r20, r24
 ac0:	0a 2e       	mov	r0, r26
 ac2:	06 94       	lsr	r0
 ac4:	57 95       	ror	r21
 ac6:	47 95       	ror	r20
 ac8:	37 95       	ror	r19
 aca:	27 95       	ror	r18
 acc:	ba 95       	dec	r27
 ace:	c9 f7       	brne	.-14     	; 0xac2 <__ultoa_invert+0xa2>
 ad0:	62 0f       	add	r22, r18
 ad2:	73 1f       	adc	r23, r19
 ad4:	84 1f       	adc	r24, r20
 ad6:	95 1f       	adc	r25, r21
 ad8:	a0 1d       	adc	r26, r0
 ada:	08 95       	ret

00000adc <__prologue_saves__>:
 adc:	2f 92       	push	r2
 ade:	3f 92       	push	r3
 ae0:	4f 92       	push	r4
 ae2:	5f 92       	push	r5
 ae4:	6f 92       	push	r6
 ae6:	7f 92       	push	r7
 ae8:	8f 92       	push	r8
 aea:	9f 92       	push	r9
 aec:	af 92       	push	r10
 aee:	bf 92       	push	r11
 af0:	cf 92       	push	r12
 af2:	df 92       	push	r13
 af4:	ef 92       	push	r14
 af6:	ff 92       	push	r15
 af8:	0f 93       	push	r16
 afa:	1f 93       	push	r17
 afc:	cf 93       	push	r28
 afe:	df 93       	push	r29
 b00:	cd b7       	in	r28, 0x3d	; 61
 b02:	de b7       	in	r29, 0x3e	; 62
 b04:	ca 1b       	sub	r28, r26
 b06:	db 0b       	sbc	r29, r27
 b08:	0f b6       	in	r0, 0x3f	; 63
 b0a:	f8 94       	cli
 b0c:	de bf       	out	0x3e, r29	; 62
 b0e:	0f be       	out	0x3f, r0	; 63
 b10:	cd bf       	out	0x3d, r28	; 61
 b12:	09 94       	ijmp

00000b14 <__epilogue_restores__>:
 b14:	2a 88       	ldd	r2, Y+18	; 0x12
 b16:	39 88       	ldd	r3, Y+17	; 0x11
 b18:	48 88       	ldd	r4, Y+16	; 0x10
 b1a:	5f 84       	ldd	r5, Y+15	; 0x0f
 b1c:	6e 84       	ldd	r6, Y+14	; 0x0e
 b1e:	7d 84       	ldd	r7, Y+13	; 0x0d
 b20:	8c 84       	ldd	r8, Y+12	; 0x0c
 b22:	9b 84       	ldd	r9, Y+11	; 0x0b
 b24:	aa 84       	ldd	r10, Y+10	; 0x0a
 b26:	b9 84       	ldd	r11, Y+9	; 0x09
 b28:	c8 84       	ldd	r12, Y+8	; 0x08
 b2a:	df 80       	ldd	r13, Y+7	; 0x07
 b2c:	ee 80       	ldd	r14, Y+6	; 0x06
 b2e:	fd 80       	ldd	r15, Y+5	; 0x05
 b30:	0c 81       	ldd	r16, Y+4	; 0x04
 b32:	1b 81       	ldd	r17, Y+3	; 0x03
 b34:	aa 81       	ldd	r26, Y+2	; 0x02
 b36:	b9 81       	ldd	r27, Y+1	; 0x01
 b38:	ce 0f       	add	r28, r30
 b3a:	d1 1d       	adc	r29, r1
 b3c:	0f b6       	in	r0, 0x3f	; 63
 b3e:	f8 94       	cli
 b40:	de bf       	out	0x3e, r29	; 62
 b42:	0f be       	out	0x3f, r0	; 63
 b44:	cd bf       	out	0x3d, r28	; 61
 b46:	ed 01       	movw	r28, r26
 b48:	08 95       	ret

00000b4a <_exit>:
 b4a:	f8 94       	cli

00000b4c <__stop_program>:
 b4c:	ff cf       	rjmp	.-2      	; 0xb4c <__stop_program>
